/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.states.impl;

import com.visteon.onoff.coom.State;

import com.visteon.onoff.states.ComponentState;
import com.visteon.onoff.states.FeatureDependency;
import com.visteon.onoff.states.StateDependency;
import com.visteon.onoff.states.StatesPackage;
import com.visteon.onoff.states.TransitionDependency;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentStateImpl#getState <em>State</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentStateImpl#getStateDependencies <em>State Dependencies</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentStateImpl#getFeatureDependencies <em>Feature Dependencies</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentStateImpl#getTransitionDependencies <em>Transition Dependencies</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentStateImpl extends MinimalEObjectImpl.Container implements ComponentState
{
  /**
   * The cached value of the '{@link #getState() <em>State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected State state;

  /**
   * The cached value of the '{@link #getStateDependencies() <em>State Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateDependencies()
   * @generated
   * @ordered
   */
  protected EList<StateDependency> stateDependencies;

  /**
   * The cached value of the '{@link #getFeatureDependencies() <em>Feature Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatureDependencies()
   * @generated
   * @ordered
   */
  protected EList<FeatureDependency> featureDependencies;

  /**
   * The cached value of the '{@link #getTransitionDependencies() <em>Transition Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitionDependencies()
   * @generated
   * @ordered
   */
  protected EList<TransitionDependency> transitionDependencies;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentStateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatesPackage.Literals.COMPONENT_STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State getState()
  {
    if (state != null && state.eIsProxy())
    {
      InternalEObject oldState = (InternalEObject)state;
      state = (State)eResolveProxy(oldState);
      if (state != oldState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatesPackage.COMPONENT_STATE__STATE, oldState, state));
      }
    }
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State basicGetState()
  {
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setState(State newState)
  {
    State oldState = state;
    state = newState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_STATE__STATE, oldState, state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StateDependency> getStateDependencies()
  {
    if (stateDependencies == null)
    {
      stateDependencies = new EObjectContainmentEList<StateDependency>(StateDependency.class, this, StatesPackage.COMPONENT_STATE__STATE_DEPENDENCIES);
    }
    return stateDependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FeatureDependency> getFeatureDependencies()
  {
    if (featureDependencies == null)
    {
      featureDependencies = new EObjectContainmentEList<FeatureDependency>(FeatureDependency.class, this, StatesPackage.COMPONENT_STATE__FEATURE_DEPENDENCIES);
    }
    return featureDependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TransitionDependency> getTransitionDependencies()
  {
    if (transitionDependencies == null)
    {
      transitionDependencies = new EObjectContainmentEList<TransitionDependency>(TransitionDependency.class, this, StatesPackage.COMPONENT_STATE__TRANSITION_DEPENDENCIES);
    }
    return transitionDependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_STATE__STATE_DEPENDENCIES:
        return ((InternalEList<?>)getStateDependencies()).basicRemove(otherEnd, msgs);
      case StatesPackage.COMPONENT_STATE__FEATURE_DEPENDENCIES:
        return ((InternalEList<?>)getFeatureDependencies()).basicRemove(otherEnd, msgs);
      case StatesPackage.COMPONENT_STATE__TRANSITION_DEPENDENCIES:
        return ((InternalEList<?>)getTransitionDependencies()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_STATE__STATE:
        if (resolve) return getState();
        return basicGetState();
      case StatesPackage.COMPONENT_STATE__STATE_DEPENDENCIES:
        return getStateDependencies();
      case StatesPackage.COMPONENT_STATE__FEATURE_DEPENDENCIES:
        return getFeatureDependencies();
      case StatesPackage.COMPONENT_STATE__TRANSITION_DEPENDENCIES:
        return getTransitionDependencies();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_STATE__STATE:
        setState((State)newValue);
        return;
      case StatesPackage.COMPONENT_STATE__STATE_DEPENDENCIES:
        getStateDependencies().clear();
        getStateDependencies().addAll((Collection<? extends StateDependency>)newValue);
        return;
      case StatesPackage.COMPONENT_STATE__FEATURE_DEPENDENCIES:
        getFeatureDependencies().clear();
        getFeatureDependencies().addAll((Collection<? extends FeatureDependency>)newValue);
        return;
      case StatesPackage.COMPONENT_STATE__TRANSITION_DEPENDENCIES:
        getTransitionDependencies().clear();
        getTransitionDependencies().addAll((Collection<? extends TransitionDependency>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_STATE__STATE:
        setState((State)null);
        return;
      case StatesPackage.COMPONENT_STATE__STATE_DEPENDENCIES:
        getStateDependencies().clear();
        return;
      case StatesPackage.COMPONENT_STATE__FEATURE_DEPENDENCIES:
        getFeatureDependencies().clear();
        return;
      case StatesPackage.COMPONENT_STATE__TRANSITION_DEPENDENCIES:
        getTransitionDependencies().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_STATE__STATE:
        return state != null;
      case StatesPackage.COMPONENT_STATE__STATE_DEPENDENCIES:
        return stateDependencies != null && !stateDependencies.isEmpty();
      case StatesPackage.COMPONENT_STATE__FEATURE_DEPENDENCIES:
        return featureDependencies != null && !featureDependencies.isEmpty();
      case StatesPackage.COMPONENT_STATE__TRANSITION_DEPENDENCIES:
        return transitionDependencies != null && !transitionDependencies.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ComponentStateImpl
