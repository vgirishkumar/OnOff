/*
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StatesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class NodeStateConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeStateConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cNsdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNsdNodeStateDiagramParserRuleCall_2_0 = (RuleCall)cNsdAssignment_2.eContents().get(0);
		private final Assignment cClientConfigAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClientConfigClientConfigurationParserRuleCall_3_0 = (RuleCall)cClientConfigAssignment_3.eContents().get(0);
		
		//NodeStateConfiguration:
		//	('package' name=FQN)?
		//	imports+=Import*
		//	nsd=NodeStateDiagram?
		//	clientConfig+=ClientConfiguration*;
		@Override public ParserRule getRule() { return rule; }
		
		//('package' name=FQN)? imports+=Import* nsd=NodeStateDiagram? clientConfig+=ClientConfiguration*
		public Group getGroup() { return cGroup; }
		
		//('package' name=FQN)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'package'
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }
		
		//name=FQN
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_0_1_0() { return cNameFQNParserRuleCall_0_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//nsd=NodeStateDiagram?
		public Assignment getNsdAssignment_2() { return cNsdAssignment_2; }
		
		//NodeStateDiagram
		public RuleCall getNsdNodeStateDiagramParserRuleCall_2_0() { return cNsdNodeStateDiagramParserRuleCall_2_0; }
		
		//clientConfig+=ClientConfiguration*
		public Assignment getClientConfigAssignment_3() { return cClientConfigAssignment_3; }
		
		//ClientConfiguration
		public RuleCall getClientConfigClientConfigurationParserRuleCall_3_0() { return cClientConfigClientConfigurationParserRuleCall_3_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class NodeStateDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeStateDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeStateDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeStateDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGlobalTransitionTimeoutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGTransitionTimeoutInMillisecondsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGTransitionTimeoutInMillisecondsINTTerminalRuleCall_3_1_0 = (RuleCall)cGTransitionTimeoutInMillisecondsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGlobalEdgeweightKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGEdgeWeightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGEdgeWeightINTTerminalRuleCall_4_1_0 = (RuleCall)cGEdgeWeightAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cNodeStatesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cNodeStatesNodeStateParserRuleCall_5_0_0 = (RuleCall)cNodeStatesAssignment_5_0.eContents().get(0);
		private final Assignment cNodeTransitionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNodeTransitionsNodeTransitionParserRuleCall_5_1_0 = (RuleCall)cNodeTransitionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeStateDiagram:
		//	{NodeStateDiagram}
		//	'NodeStateDiagram' '{' ('GlobalTransitionTimeout' gTransitionTimeoutInMilliseconds=INT)? ('GlobalEdgeweight'
		//	gEdgeWeight=INT)? (nodeStates+=NodeState | nodeTransitions+=NodeTransition)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeStateDiagram} 'NodeStateDiagram' '{' ('GlobalTransitionTimeout' gTransitionTimeoutInMilliseconds=INT)?
		//('GlobalEdgeweight' gEdgeWeight=INT)? (nodeStates+=NodeState | nodeTransitions+=NodeTransition)* '}'
		public Group getGroup() { return cGroup; }
		
		//{NodeStateDiagram}
		public Action getNodeStateDiagramAction_0() { return cNodeStateDiagramAction_0; }
		
		//'NodeStateDiagram'
		public Keyword getNodeStateDiagramKeyword_1() { return cNodeStateDiagramKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('GlobalTransitionTimeout' gTransitionTimeoutInMilliseconds=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'GlobalTransitionTimeout'
		public Keyword getGlobalTransitionTimeoutKeyword_3_0() { return cGlobalTransitionTimeoutKeyword_3_0; }
		
		//gTransitionTimeoutInMilliseconds=INT
		public Assignment getGTransitionTimeoutInMillisecondsAssignment_3_1() { return cGTransitionTimeoutInMillisecondsAssignment_3_1; }
		
		//INT
		public RuleCall getGTransitionTimeoutInMillisecondsINTTerminalRuleCall_3_1_0() { return cGTransitionTimeoutInMillisecondsINTTerminalRuleCall_3_1_0; }
		
		//('GlobalEdgeweight' gEdgeWeight=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'GlobalEdgeweight'
		public Keyword getGlobalEdgeweightKeyword_4_0() { return cGlobalEdgeweightKeyword_4_0; }
		
		//gEdgeWeight=INT
		public Assignment getGEdgeWeightAssignment_4_1() { return cGEdgeWeightAssignment_4_1; }
		
		//INT
		public RuleCall getGEdgeWeightINTTerminalRuleCall_4_1_0() { return cGEdgeWeightINTTerminalRuleCall_4_1_0; }
		
		//(nodeStates+=NodeState | nodeTransitions+=NodeTransition)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//nodeStates+=NodeState
		public Assignment getNodeStatesAssignment_5_0() { return cNodeStatesAssignment_5_0; }
		
		//NodeState
		public RuleCall getNodeStatesNodeStateParserRuleCall_5_0_0() { return cNodeStatesNodeStateParserRuleCall_5_0_0; }
		
		//nodeTransitions+=NodeTransition
		public Assignment getNodeTransitionsAssignment_5_1() { return cNodeTransitionsAssignment_5_1; }
		
		//NodeTransition
		public RuleCall getNodeTransitionsNodeTransitionParserRuleCall_5_1_0() { return cNodeTransitionsNodeTransitionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NodeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cInitialInitialKeyword_2_1_0 = (Keyword)cInitialAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//NodeState:
		//	'State' name=ID ('{'
		//	initial?='initial'?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'State' name=ID ('{' initial?='initial'? '}')?
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' initial?='initial'? '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_2_1() { return cInitialAssignment_2_1; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_2_1_0() { return cInitialInitialKeyword_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class NodeTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromStateNodeStateCrossReference_3_0 = (CrossReference)cFromStateAssignment_3.eContents().get(0);
		private final RuleCall cFromStateNodeStateIDTerminalRuleCall_3_0_1 = (RuleCall)cFromStateNodeStateCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cToStateNodeStateCrossReference_5_0 = (CrossReference)cToStateAssignment_5.eContents().get(0);
		private final RuleCall cToStateNodeStateIDTerminalRuleCall_5_0_1 = (RuleCall)cToStateNodeStateCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cEdgeweightKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cEdgeweightAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cEdgeweightINTTerminalRuleCall_6_1_1_0 = (RuleCall)cEdgeweightAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cTimeoutKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cTimeoutInMillisecondsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cTimeoutInMillisecondsINTTerminalRuleCall_6_2_1_0 = (RuleCall)cTimeoutInMillisecondsAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//NodeTransition:
		//	'Transition' name=ID ':' fromState=[NodeState] '->' toState=[NodeState] ('{' ('edgeweight' edgeweight=INT)?
		//	('timeout' timeoutInMilliseconds=INT)?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Transition' name=ID ':' fromState=[NodeState] '->' toState=[NodeState] ('{' ('edgeweight' edgeweight=INT)? ('timeout'
		//timeoutInMilliseconds=INT)? '}')?
		public Group getGroup() { return cGroup; }
		
		//'Transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//fromState=[NodeState]
		public Assignment getFromStateAssignment_3() { return cFromStateAssignment_3; }
		
		//[NodeState]
		public CrossReference getFromStateNodeStateCrossReference_3_0() { return cFromStateNodeStateCrossReference_3_0; }
		
		//ID
		public RuleCall getFromStateNodeStateIDTerminalRuleCall_3_0_1() { return cFromStateNodeStateIDTerminalRuleCall_3_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//toState=[NodeState]
		public Assignment getToStateAssignment_5() { return cToStateAssignment_5; }
		
		//[NodeState]
		public CrossReference getToStateNodeStateCrossReference_5_0() { return cToStateNodeStateCrossReference_5_0; }
		
		//ID
		public RuleCall getToStateNodeStateIDTerminalRuleCall_5_0_1() { return cToStateNodeStateIDTerminalRuleCall_5_0_1; }
		
		//('{' ('edgeweight' edgeweight=INT)? ('timeout' timeoutInMilliseconds=INT)? '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//('edgeweight' edgeweight=INT)?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'edgeweight'
		public Keyword getEdgeweightKeyword_6_1_0() { return cEdgeweightKeyword_6_1_0; }
		
		//edgeweight=INT
		public Assignment getEdgeweightAssignment_6_1_1() { return cEdgeweightAssignment_6_1_1; }
		
		//INT
		public RuleCall getEdgeweightINTTerminalRuleCall_6_1_1_0() { return cEdgeweightINTTerminalRuleCall_6_1_1_0; }
		
		//('timeout' timeoutInMilliseconds=INT)?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_6_2_0() { return cTimeoutKeyword_6_2_0; }
		
		//timeoutInMilliseconds=INT
		public Assignment getTimeoutInMillisecondsAssignment_6_2_1() { return cTimeoutInMillisecondsAssignment_6_2_1; }
		
		//INT
		public RuleCall getTimeoutInMillisecondsINTTerminalRuleCall_6_2_1_0() { return cTimeoutInMillisecondsINTTerminalRuleCall_6_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}
	public class ClientConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.ClientConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCOOMKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCoomRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cCoomRefComponentOnOffManifestCrossReference_3_1_0 = (CrossReference)cCoomRefAssignment_3_1.eContents().get(0);
		private final RuleCall cCoomRefComponentOnOffManifestFQNParserRuleCall_3_1_0_1 = (RuleCall)cCoomRefComponentOnOffManifestCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cClientTransitionTimeoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTransTimeoutInMillisecondsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTransTimeoutInMillisecondsINTTerminalRuleCall_4_1_0 = (RuleCall)cTransTimeoutInMillisecondsAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cComponentTransitionsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cComponentTransitionsComponentTransitionParserRuleCall_5_0_0 = (RuleCall)cComponentTransitionsAssignment_5_0.eContents().get(0);
		private final Assignment cNodeStateAssociationsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNodeStateAssociationsNodeStateAssociationParserRuleCall_5_1_0 = (RuleCall)cNodeStateAssociationsAssignment_5_1.eContents().get(0);
		private final Assignment cComponentStatesAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cComponentStatesComponentStateParserRuleCall_5_2_0 = (RuleCall)cComponentStatesAssignment_5_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_5_3_0 = (RuleCall)cFeaturesAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ClientConfiguration:
		//	'Client' name=FQN // instance name - scope coming from COOM
		//	'{' ('COOM' coomRef=[coom::ComponentOnOffManifest|FQN]) ('ClientTransitionTimeout' transTimeoutInMilliseconds=INT)?
		//	(componentTransitions+=ComponentTransition | nodeStateAssociations+=NodeStateAssociation |
		//	componentStates+=ComponentState | features+=Feature)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Client' name=FQN // instance name - scope coming from COOM
		//'{' ('COOM' coomRef=[coom::ComponentOnOffManifest|FQN]) ('ClientTransitionTimeout' transTimeoutInMilliseconds=INT)?
		//(componentTransitions+=ComponentTransition | nodeStateAssociations+=NodeStateAssociation |
		//componentStates+=ComponentState | features+=Feature)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Client'
		public Keyword getClientKeyword_0() { return cClientKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//// instance name - scope coming from COOM
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'COOM' coomRef=[coom::ComponentOnOffManifest|FQN]
		public Group getGroup_3() { return cGroup_3; }
		
		//'COOM'
		public Keyword getCOOMKeyword_3_0() { return cCOOMKeyword_3_0; }
		
		//coomRef=[coom::ComponentOnOffManifest|FQN]
		public Assignment getCoomRefAssignment_3_1() { return cCoomRefAssignment_3_1; }
		
		//[coom::ComponentOnOffManifest|FQN]
		public CrossReference getCoomRefComponentOnOffManifestCrossReference_3_1_0() { return cCoomRefComponentOnOffManifestCrossReference_3_1_0; }
		
		//FQN
		public RuleCall getCoomRefComponentOnOffManifestFQNParserRuleCall_3_1_0_1() { return cCoomRefComponentOnOffManifestFQNParserRuleCall_3_1_0_1; }
		
		//('ClientTransitionTimeout' transTimeoutInMilliseconds=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ClientTransitionTimeout'
		public Keyword getClientTransitionTimeoutKeyword_4_0() { return cClientTransitionTimeoutKeyword_4_0; }
		
		//transTimeoutInMilliseconds=INT
		public Assignment getTransTimeoutInMillisecondsAssignment_4_1() { return cTransTimeoutInMillisecondsAssignment_4_1; }
		
		//INT
		public RuleCall getTransTimeoutInMillisecondsINTTerminalRuleCall_4_1_0() { return cTransTimeoutInMillisecondsINTTerminalRuleCall_4_1_0; }
		
		//(componentTransitions+=ComponentTransition | nodeStateAssociations+=NodeStateAssociation |
		//componentStates+=ComponentState | features+=Feature)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//componentTransitions+=ComponentTransition
		public Assignment getComponentTransitionsAssignment_5_0() { return cComponentTransitionsAssignment_5_0; }
		
		//ComponentTransition
		public RuleCall getComponentTransitionsComponentTransitionParserRuleCall_5_0_0() { return cComponentTransitionsComponentTransitionParserRuleCall_5_0_0; }
		
		//nodeStateAssociations+=NodeStateAssociation
		public Assignment getNodeStateAssociationsAssignment_5_1() { return cNodeStateAssociationsAssignment_5_1; }
		
		//NodeStateAssociation
		public RuleCall getNodeStateAssociationsNodeStateAssociationParserRuleCall_5_1_0() { return cNodeStateAssociationsNodeStateAssociationParserRuleCall_5_1_0; }
		
		//componentStates+=ComponentState
		public Assignment getComponentStatesAssignment_5_2() { return cComponentStatesAssignment_5_2; }
		
		//ComponentState
		public RuleCall getComponentStatesComponentStateParserRuleCall_5_2_0() { return cComponentStatesComponentStateParserRuleCall_5_2_0; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_5_3() { return cFeaturesAssignment_5_3; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_5_3_0() { return cFeaturesFeatureParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ComponentTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.ComponentTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTransitionTransitionCrossReference_1_0 = (CrossReference)cTransitionAssignment_1.eContents().get(0);
		private final RuleCall cTransitionTransitionFQNParserRuleCall_1_0_1 = (RuleCall)cTransitionTransitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTimeoutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTimeoutInMillisecondsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeoutInMillisecondsINTTerminalRuleCall_3_1_0 = (RuleCall)cTimeoutInMillisecondsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentTransition:
		//	'Transition' transition=[coom::Transition|FQN]
		//	'{' ('timeout' timeoutInMilliseconds=INT)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Transition' transition=[coom::Transition|FQN] '{' ('timeout' timeoutInMilliseconds=INT)? '}'
		public Group getGroup() { return cGroup; }
		
		//'Transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//transition=[coom::Transition|FQN]
		public Assignment getTransitionAssignment_1() { return cTransitionAssignment_1; }
		
		//[coom::Transition|FQN]
		public CrossReference getTransitionTransitionCrossReference_1_0() { return cTransitionTransitionCrossReference_1_0; }
		
		//FQN
		public RuleCall getTransitionTransitionFQNParserRuleCall_1_0_1() { return cTransitionTransitionFQNParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('timeout' timeoutInMilliseconds=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_3_0() { return cTimeoutKeyword_3_0; }
		
		//timeoutInMilliseconds=INT
		public Assignment getTimeoutInMillisecondsAssignment_3_1() { return cTimeoutInMillisecondsAssignment_3_1; }
		
		//INT
		public RuleCall getTimeoutInMillisecondsINTTerminalRuleCall_3_1_0() { return cTimeoutInMillisecondsINTTerminalRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComponentStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.ComponentState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateStateCrossReference_1_0 = (CrossReference)cStateAssignment_1.eContents().get(0);
		private final RuleCall cStateStateFQNParserRuleCall_1_0_1 = (RuleCall)cStateStateCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cStateDependenciesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cStateDependenciesStateDependencyParserRuleCall_3_0_0 = (RuleCall)cStateDependenciesAssignment_3_0.eContents().get(0);
		private final Assignment cFeatureDependenciesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFeatureDependenciesFeatureDependencyParserRuleCall_3_1_0 = (RuleCall)cFeatureDependenciesAssignment_3_1.eContents().get(0);
		private final Assignment cTransitionDependenciesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cTransitionDependenciesTransitionDependencyParserRuleCall_3_2_0 = (RuleCall)cTransitionDependenciesAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentState:
		//	'State' state=[coom::State|FQN]
		//	'{' (stateDependencies+=StateDependency | featureDependencies+=FeatureDependency |
		//	transitionDependencies+=TransitionDependency)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'State' state=[coom::State|FQN] '{' (stateDependencies+=StateDependency | featureDependencies+=FeatureDependency |
		//transitionDependencies+=TransitionDependency)* '}'
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//state=[coom::State|FQN]
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//[coom::State|FQN]
		public CrossReference getStateStateCrossReference_1_0() { return cStateStateCrossReference_1_0; }
		
		//FQN
		public RuleCall getStateStateFQNParserRuleCall_1_0_1() { return cStateStateFQNParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(stateDependencies+=StateDependency | featureDependencies+=FeatureDependency |
		//transitionDependencies+=TransitionDependency)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//stateDependencies+=StateDependency
		public Assignment getStateDependenciesAssignment_3_0() { return cStateDependenciesAssignment_3_0; }
		
		//StateDependency
		public RuleCall getStateDependenciesStateDependencyParserRuleCall_3_0_0() { return cStateDependenciesStateDependencyParserRuleCall_3_0_0; }
		
		//featureDependencies+=FeatureDependency
		public Assignment getFeatureDependenciesAssignment_3_1() { return cFeatureDependenciesAssignment_3_1; }
		
		//FeatureDependency
		public RuleCall getFeatureDependenciesFeatureDependencyParserRuleCall_3_1_0() { return cFeatureDependenciesFeatureDependencyParserRuleCall_3_1_0; }
		
		//transitionDependencies+=TransitionDependency
		public Assignment getTransitionDependenciesAssignment_3_2() { return cTransitionDependenciesAssignment_3_2; }
		
		//TransitionDependency
		public RuleCall getTransitionDependenciesTransitionDependencyParserRuleCall_3_2_0() { return cTransitionDependenciesTransitionDependencyParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StateDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.StateDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateDependenyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateDependenyStateCrossReference_1_0 = (CrossReference)cStateDependenyAssignment_1.eContents().get(0);
		private final RuleCall cStateDependenyStateFQNParserRuleCall_1_0_1 = (RuleCall)cStateDependenyStateCrossReference_1_0.eContents().get(1);
		
		//StateDependency:
		//	'depends on State' stateDependeny=[coom::State|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//'depends on State' stateDependeny=[coom::State|FQN]
		public Group getGroup() { return cGroup; }
		
		//'depends on State'
		public Keyword getDependsOnStateKeyword_0() { return cDependsOnStateKeyword_0; }
		
		//stateDependeny=[coom::State|FQN]
		public Assignment getStateDependenyAssignment_1() { return cStateDependenyAssignment_1; }
		
		//[coom::State|FQN]
		public CrossReference getStateDependenyStateCrossReference_1_0() { return cStateDependenyStateCrossReference_1_0; }
		
		//FQN
		public RuleCall getStateDependenyStateFQNParserRuleCall_1_0_1() { return cStateDependenyStateFQNParserRuleCall_1_0_1; }
	}
	public class TransitionDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.TransitionDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransitionDependenyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTransitionDependenyTransitionCrossReference_1_0 = (CrossReference)cTransitionDependenyAssignment_1.eContents().get(0);
		private final RuleCall cTransitionDependenyTransitionFQNParserRuleCall_1_0_1 = (RuleCall)cTransitionDependenyTransitionCrossReference_1_0.eContents().get(1);
		
		//TransitionDependency:
		//	'depends on Transition' transitionDependeny=[coom::Transition|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//'depends on Transition' transitionDependeny=[coom::Transition|FQN]
		public Group getGroup() { return cGroup; }
		
		//'depends on Transition'
		public Keyword getDependsOnTransitionKeyword_0() { return cDependsOnTransitionKeyword_0; }
		
		//transitionDependeny=[coom::Transition|FQN]
		public Assignment getTransitionDependenyAssignment_1() { return cTransitionDependenyAssignment_1; }
		
		//[coom::Transition|FQN]
		public CrossReference getTransitionDependenyTransitionCrossReference_1_0() { return cTransitionDependenyTransitionCrossReference_1_0; }
		
		//FQN
		public RuleCall getTransitionDependenyTransitionFQNParserRuleCall_1_0_1() { return cTransitionDependenyTransitionFQNParserRuleCall_1_0_1; }
	}
	public class FeatureDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.FeatureDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureDependenyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureDependenyFeatureCrossReference_1_0 = (CrossReference)cFeatureDependenyAssignment_1.eContents().get(0);
		private final RuleCall cFeatureDependenyFeatureFQNParserRuleCall_1_0_1 = (RuleCall)cFeatureDependenyFeatureCrossReference_1_0.eContents().get(1);
		
		//FeatureDependency:
		//	'depends on Feature' featureDependeny=[Feature|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//'depends on Feature' featureDependeny=[Feature|FQN]
		public Group getGroup() { return cGroup; }
		
		//'depends on Feature'
		public Keyword getDependsOnFeatureKeyword_0() { return cDependsOnFeatureKeyword_0; }
		
		//featureDependeny=[Feature|FQN]
		public Assignment getFeatureDependenyAssignment_1() { return cFeatureDependenyAssignment_1; }
		
		//[Feature|FQN]
		public CrossReference getFeatureDependenyFeatureCrossReference_1_0() { return cFeatureDependenyFeatureCrossReference_1_0; }
		
		//FQN
		public RuleCall getFeatureDependenyFeatureFQNParserRuleCall_1_0_1() { return cFeatureDependenyFeatureFQNParserRuleCall_1_0_1; }
	}
	public class NodeStateAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeStateAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodeStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNodeStateNodeStateCrossReference_1_0 = (CrossReference)cNodeStateAssignment_1.eContents().get(0);
		private final RuleCall cNodeStateNodeStateIDTerminalRuleCall_1_0_1 = (RuleCall)cNodeStateNodeStateCrossReference_1_0.eContents().get(1);
		private final Keyword cSetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClientStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClientStateStateCrossReference_3_0 = (CrossReference)cClientStateAssignment_3.eContents().get(0);
		private final RuleCall cClientStateStateFQNParserRuleCall_3_0_1 = (RuleCall)cClientStateStateCrossReference_3_0.eContents().get(1);
		
		//NodeStateAssociation:
		//	'For' nodeState=[NodeState] 'set' clientState=[coom::State|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//'For' nodeState=[NodeState] 'set' clientState=[coom::State|FQN]
		public Group getGroup() { return cGroup; }
		
		//'For'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//nodeState=[NodeState]
		public Assignment getNodeStateAssignment_1() { return cNodeStateAssignment_1; }
		
		//[NodeState]
		public CrossReference getNodeStateNodeStateCrossReference_1_0() { return cNodeStateNodeStateCrossReference_1_0; }
		
		//ID
		public RuleCall getNodeStateNodeStateIDTerminalRuleCall_1_0_1() { return cNodeStateNodeStateIDTerminalRuleCall_1_0_1; }
		
		//'set'
		public Keyword getSetKeyword_2() { return cSetKeyword_2; }
		
		//clientState=[coom::State|FQN]
		public Assignment getClientStateAssignment_3() { return cClientStateAssignment_3; }
		
		//[coom::State|FQN]
		public CrossReference getClientStateStateCrossReference_3_0() { return cClientStateStateCrossReference_3_0; }
		
		//FQN
		public RuleCall getClientStateStateFQNParserRuleCall_3_0_1() { return cClientStateStateFQNParserRuleCall_3_0_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStatesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeatureStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFeatureStatesStateCrossReference_4_0 = (CrossReference)cFeatureStatesAssignment_4.eContents().get(0);
		private final RuleCall cFeatureStatesStateFQNParserRuleCall_4_0_1 = (RuleCall)cFeatureStatesStateCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFeatureStatesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cFeatureStatesStateCrossReference_5_1_0 = (CrossReference)cFeatureStatesAssignment_5_1.eContents().get(0);
		private final RuleCall cFeatureStatesStateFQNParserRuleCall_5_1_0_1 = (RuleCall)cFeatureStatesStateCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Feature:
		//	'Feature' name=ID
		//	'{'
		//	'States' featureStates+=[coom::State|FQN] (',' featureStates+=[coom::State|FQN])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Feature' name=ID '{' 'States' featureStates+=[coom::State|FQN] (',' featureStates+=[coom::State|FQN])* '}'
		public Group getGroup() { return cGroup; }
		
		//'Feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'States'
		public Keyword getStatesKeyword_3() { return cStatesKeyword_3; }
		
		//featureStates+=[coom::State|FQN]
		public Assignment getFeatureStatesAssignment_4() { return cFeatureStatesAssignment_4; }
		
		//[coom::State|FQN]
		public CrossReference getFeatureStatesStateCrossReference_4_0() { return cFeatureStatesStateCrossReference_4_0; }
		
		//FQN
		public RuleCall getFeatureStatesStateFQNParserRuleCall_4_0_1() { return cFeatureStatesStateFQNParserRuleCall_4_0_1; }
		
		//(',' featureStates+=[coom::State|FQN])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//featureStates+=[coom::State|FQN]
		public Assignment getFeatureStatesAssignment_5_1() { return cFeatureStatesAssignment_5_1; }
		
		//[coom::State|FQN]
		public CrossReference getFeatureStatesStateCrossReference_5_1_0() { return cFeatureStatesStateCrossReference_5_1_0; }
		
		//FQN
		public RuleCall getFeatureStatesStateFQNParserRuleCall_5_1_0_1() { return cFeatureStatesStateFQNParserRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final NodeStateConfigurationElements pNodeStateConfiguration;
	private final ImportElements pImport;
	private final NodeStateDiagramElements pNodeStateDiagram;
	private final NodeStateElements pNodeState;
	private final NodeTransitionElements pNodeTransition;
	private final ClientConfigurationElements pClientConfiguration;
	private final ComponentTransitionElements pComponentTransition;
	private final ComponentStateElements pComponentState;
	private final StateDependencyElements pStateDependency;
	private final TransitionDependencyElements pTransitionDependency;
	private final FeatureDependencyElements pFeatureDependency;
	private final NodeStateAssociationElements pNodeStateAssociation;
	private final FeatureElements pFeature;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StatesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNodeStateConfiguration = new NodeStateConfigurationElements();
		this.pImport = new ImportElements();
		this.pNodeStateDiagram = new NodeStateDiagramElements();
		this.pNodeState = new NodeStateElements();
		this.pNodeTransition = new NodeTransitionElements();
		this.pClientConfiguration = new ClientConfigurationElements();
		this.pComponentTransition = new ComponentTransitionElements();
		this.pComponentState = new ComponentStateElements();
		this.pStateDependency = new StateDependencyElements();
		this.pTransitionDependency = new TransitionDependencyElements();
		this.pFeatureDependency = new FeatureDependencyElements();
		this.pNodeStateAssociation = new NodeStateAssociationElements();
		this.pFeature = new FeatureElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.visteon.onoff.States".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//NodeStateConfiguration:
	//	('package' name=FQN)?
	//	imports+=Import*
	//	nsd=NodeStateDiagram?
	//	clientConfig+=ClientConfiguration*;
	public NodeStateConfigurationElements getNodeStateConfigurationAccess() {
		return pNodeStateConfiguration;
	}
	
	public ParserRule getNodeStateConfigurationRule() {
		return getNodeStateConfigurationAccess().getRule();
	}
	
	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//NodeStateDiagram:
	//	{NodeStateDiagram}
	//	'NodeStateDiagram' '{' ('GlobalTransitionTimeout' gTransitionTimeoutInMilliseconds=INT)? ('GlobalEdgeweight'
	//	gEdgeWeight=INT)? (nodeStates+=NodeState | nodeTransitions+=NodeTransition)*
	//	'}';
	public NodeStateDiagramElements getNodeStateDiagramAccess() {
		return pNodeStateDiagram;
	}
	
	public ParserRule getNodeStateDiagramRule() {
		return getNodeStateDiagramAccess().getRule();
	}
	
	//NodeState:
	//	'State' name=ID ('{'
	//	initial?='initial'?
	//	'}')?;
	public NodeStateElements getNodeStateAccess() {
		return pNodeState;
	}
	
	public ParserRule getNodeStateRule() {
		return getNodeStateAccess().getRule();
	}
	
	//NodeTransition:
	//	'Transition' name=ID ':' fromState=[NodeState] '->' toState=[NodeState] ('{' ('edgeweight' edgeweight=INT)?
	//	('timeout' timeoutInMilliseconds=INT)?
	//	'}')?;
	public NodeTransitionElements getNodeTransitionAccess() {
		return pNodeTransition;
	}
	
	public ParserRule getNodeTransitionRule() {
		return getNodeTransitionAccess().getRule();
	}
	
	//ClientConfiguration:
	//	'Client' name=FQN // instance name - scope coming from COOM
	//	'{' ('COOM' coomRef=[coom::ComponentOnOffManifest|FQN]) ('ClientTransitionTimeout' transTimeoutInMilliseconds=INT)?
	//	(componentTransitions+=ComponentTransition | nodeStateAssociations+=NodeStateAssociation |
	//	componentStates+=ComponentState | features+=Feature)*
	//	'}';
	public ClientConfigurationElements getClientConfigurationAccess() {
		return pClientConfiguration;
	}
	
	public ParserRule getClientConfigurationRule() {
		return getClientConfigurationAccess().getRule();
	}
	
	//ComponentTransition:
	//	'Transition' transition=[coom::Transition|FQN]
	//	'{' ('timeout' timeoutInMilliseconds=INT)?
	//	'}';
	public ComponentTransitionElements getComponentTransitionAccess() {
		return pComponentTransition;
	}
	
	public ParserRule getComponentTransitionRule() {
		return getComponentTransitionAccess().getRule();
	}
	
	//ComponentState:
	//	'State' state=[coom::State|FQN]
	//	'{' (stateDependencies+=StateDependency | featureDependencies+=FeatureDependency |
	//	transitionDependencies+=TransitionDependency)*
	//	'}';
	public ComponentStateElements getComponentStateAccess() {
		return pComponentState;
	}
	
	public ParserRule getComponentStateRule() {
		return getComponentStateAccess().getRule();
	}
	
	//StateDependency:
	//	'depends on State' stateDependeny=[coom::State|FQN];
	public StateDependencyElements getStateDependencyAccess() {
		return pStateDependency;
	}
	
	public ParserRule getStateDependencyRule() {
		return getStateDependencyAccess().getRule();
	}
	
	//TransitionDependency:
	//	'depends on Transition' transitionDependeny=[coom::Transition|FQN];
	public TransitionDependencyElements getTransitionDependencyAccess() {
		return pTransitionDependency;
	}
	
	public ParserRule getTransitionDependencyRule() {
		return getTransitionDependencyAccess().getRule();
	}
	
	//FeatureDependency:
	//	'depends on Feature' featureDependeny=[Feature|FQN];
	public FeatureDependencyElements getFeatureDependencyAccess() {
		return pFeatureDependency;
	}
	
	public ParserRule getFeatureDependencyRule() {
		return getFeatureDependencyAccess().getRule();
	}
	
	//NodeStateAssociation:
	//	'For' nodeState=[NodeState] 'set' clientState=[coom::State|FQN];
	public NodeStateAssociationElements getNodeStateAssociationAccess() {
		return pNodeStateAssociation;
	}
	
	public ParserRule getNodeStateAssociationRule() {
		return getNodeStateAssociationAccess().getRule();
	}
	
	//Feature:
	//	'Feature' name=ID
	//	'{'
	//	'States' featureStates+=[coom::State|FQN] (',' featureStates+=[coom::State|FQN])*
	//	'}';
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
