/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.coom.impl;

import com.visteon.onoff.coom.CoomPackage;
import com.visteon.onoff.coom.Version;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Version</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.visteon.onoff.coom.impl.VersionImpl#getMajorMalue <em>Major Malue</em>}</li>
 *   <li>{@link com.visteon.onoff.coom.impl.VersionImpl#getMinorValue <em>Minor Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VersionImpl extends MinimalEObjectImpl.Container implements Version
{
  /**
   * The default value of the '{@link #getMajorMalue() <em>Major Malue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMajorMalue()
   * @generated
   * @ordered
   */
  protected static final int MAJOR_MALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMajorMalue() <em>Major Malue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMajorMalue()
   * @generated
   * @ordered
   */
  protected int majorMalue = MAJOR_MALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getMinorValue() <em>Minor Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinorValue()
   * @generated
   * @ordered
   */
  protected static final int MINOR_VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMinorValue() <em>Minor Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinorValue()
   * @generated
   * @ordered
   */
  protected int minorValue = MINOR_VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VersionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CoomPackage.Literals.VERSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMajorMalue()
  {
    return majorMalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMajorMalue(int newMajorMalue)
  {
    int oldMajorMalue = majorMalue;
    majorMalue = newMajorMalue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoomPackage.VERSION__MAJOR_MALUE, oldMajorMalue, majorMalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMinorValue()
  {
    return minorValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMinorValue(int newMinorValue)
  {
    int oldMinorValue = minorValue;
    minorValue = newMinorValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CoomPackage.VERSION__MINOR_VALUE, oldMinorValue, minorValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CoomPackage.VERSION__MAJOR_MALUE:
        return getMajorMalue();
      case CoomPackage.VERSION__MINOR_VALUE:
        return getMinorValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CoomPackage.VERSION__MAJOR_MALUE:
        setMajorMalue((Integer)newValue);
        return;
      case CoomPackage.VERSION__MINOR_VALUE:
        setMinorValue((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CoomPackage.VERSION__MAJOR_MALUE:
        setMajorMalue(MAJOR_MALUE_EDEFAULT);
        return;
      case CoomPackage.VERSION__MINOR_VALUE:
        setMinorValue(MINOR_VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CoomPackage.VERSION__MAJOR_MALUE:
        return majorMalue != MAJOR_MALUE_EDEFAULT;
      case CoomPackage.VERSION__MINOR_VALUE:
        return minorValue != MINOR_VALUE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (majorMalue: ");
    result.append(majorMalue);
    result.append(", minorValue: ");
    result.append(minorValue);
    result.append(')');
    return result.toString();
  }

} //VersionImpl
