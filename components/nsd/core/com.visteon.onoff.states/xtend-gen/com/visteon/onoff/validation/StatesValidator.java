/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.validation;

import com.visteon.onoff.states.NodeState;
import com.visteon.onoff.states.StatesPackage;
import com.visteon.onoff.validation.AbstractStatesValidator;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class StatesValidator extends AbstractStatesValidator {
  @Check
  public void checkForMultipleInitialStates(final NodeState state) {
    boolean _isInitial = state.isInitial();
    if (_isInitial) {
      final Function1<NodeState, Boolean> _function = (NodeState it) -> {
        return Boolean.valueOf(it.isInitial());
      };
      int _size = IterableExtensions.size(IterableExtensions.<NodeState>filter(EcoreUtil2.<NodeState>getSiblingsOfType(state, NodeState.class), _function));
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        this.error("A StateDiagram cannot have multiple start States", StatesPackage.Literals.NODE_STATE__INITIAL);
      }
    }
  }
}
