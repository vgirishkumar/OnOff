/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.states.impl;

import com.visteon.onoff.coom.State;

import com.visteon.onoff.states.NodeState;
import com.visteon.onoff.states.NodeStateAssociation;
import com.visteon.onoff.states.StatesPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node State Association</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateAssociationImpl#getClientState <em>Client State</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateAssociationImpl#getSystemStates <em>System States</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeStateAssociationImpl extends MinimalEObjectImpl.Container implements NodeStateAssociation
{
  /**
   * The cached value of the '{@link #getClientState() <em>Client State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClientState()
   * @generated
   * @ordered
   */
  protected State clientState;

  /**
   * The cached value of the '{@link #getSystemStates() <em>System States</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystemStates()
   * @generated
   * @ordered
   */
  protected EList<NodeState> systemStates;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeStateAssociationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatesPackage.Literals.NODE_STATE_ASSOCIATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State getClientState()
  {
    if (clientState != null && clientState.eIsProxy())
    {
      InternalEObject oldClientState = (InternalEObject)clientState;
      clientState = (State)eResolveProxy(oldClientState);
      if (clientState != oldClientState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatesPackage.NODE_STATE_ASSOCIATION__CLIENT_STATE, oldClientState, clientState));
      }
    }
    return clientState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State basicGetClientState()
  {
    return clientState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClientState(State newClientState)
  {
    State oldClientState = clientState;
    clientState = newClientState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_STATE_ASSOCIATION__CLIENT_STATE, oldClientState, clientState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NodeState> getSystemStates()
  {
    if (systemStates == null)
    {
      systemStates = new EObjectResolvingEList<NodeState>(NodeState.class, this, StatesPackage.NODE_STATE_ASSOCIATION__SYSTEM_STATES);
    }
    return systemStates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_ASSOCIATION__CLIENT_STATE:
        if (resolve) return getClientState();
        return basicGetClientState();
      case StatesPackage.NODE_STATE_ASSOCIATION__SYSTEM_STATES:
        return getSystemStates();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_ASSOCIATION__CLIENT_STATE:
        setClientState((State)newValue);
        return;
      case StatesPackage.NODE_STATE_ASSOCIATION__SYSTEM_STATES:
        getSystemStates().clear();
        getSystemStates().addAll((Collection<? extends NodeState>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_ASSOCIATION__CLIENT_STATE:
        setClientState((State)null);
        return;
      case StatesPackage.NODE_STATE_ASSOCIATION__SYSTEM_STATES:
        getSystemStates().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_ASSOCIATION__CLIENT_STATE:
        return clientState != null;
      case StatesPackage.NODE_STATE_ASSOCIATION__SYSTEM_STATES:
        return systemStates != null && !systemStates.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //NodeStateAssociationImpl
