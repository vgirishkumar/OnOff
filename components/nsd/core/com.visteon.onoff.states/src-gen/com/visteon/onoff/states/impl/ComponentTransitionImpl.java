/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.states.impl;

import com.visteon.onoff.coom.Transition;

import com.visteon.onoff.states.ComponentTransition;
import com.visteon.onoff.states.FeatureDependency;
import com.visteon.onoff.states.StateDependency;
import com.visteon.onoff.states.StatesPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component Transition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentTransitionImpl#isEssential <em>Essential</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentTransitionImpl#getTransition <em>Transition</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentTransitionImpl#getTimeoutInMilliseconds <em>Timeout In Milliseconds</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentTransitionImpl#getMaxretries <em>Maxretries</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentTransitionImpl#getStateDependency <em>State Dependency</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.ComponentTransitionImpl#getFeatureDependency <em>Feature Dependency</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentTransitionImpl extends MinimalEObjectImpl.Container implements ComponentTransition
{
  /**
   * The default value of the '{@link #isEssential() <em>Essential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEssential()
   * @generated
   * @ordered
   */
  protected static final boolean ESSENTIAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEssential() <em>Essential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEssential()
   * @generated
   * @ordered
   */
  protected boolean essential = ESSENTIAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getTransition() <em>Transition</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransition()
   * @generated
   * @ordered
   */
  protected Transition transition;

  /**
   * The default value of the '{@link #getTimeoutInMilliseconds() <em>Timeout In Milliseconds</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeoutInMilliseconds()
   * @generated
   * @ordered
   */
  protected static final int TIMEOUT_IN_MILLISECONDS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTimeoutInMilliseconds() <em>Timeout In Milliseconds</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeoutInMilliseconds()
   * @generated
   * @ordered
   */
  protected int timeoutInMilliseconds = TIMEOUT_IN_MILLISECONDS_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxretries() <em>Maxretries</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxretries()
   * @generated
   * @ordered
   */
  protected static final int MAXRETRIES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMaxretries() <em>Maxretries</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxretries()
   * @generated
   * @ordered
   */
  protected int maxretries = MAXRETRIES_EDEFAULT;

  /**
   * The cached value of the '{@link #getStateDependency() <em>State Dependency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateDependency()
   * @generated
   * @ordered
   */
  protected StateDependency stateDependency;

  /**
   * The cached value of the '{@link #getFeatureDependency() <em>Feature Dependency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatureDependency()
   * @generated
   * @ordered
   */
  protected FeatureDependency featureDependency;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentTransitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatesPackage.Literals.COMPONENT_TRANSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isEssential()
  {
    return essential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEssential(boolean newEssential)
  {
    boolean oldEssential = essential;
    essential = newEssential;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__ESSENTIAL, oldEssential, essential));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transition getTransition()
  {
    if (transition != null && transition.eIsProxy())
    {
      InternalEObject oldTransition = (InternalEObject)transition;
      transition = (Transition)eResolveProxy(oldTransition);
      if (transition != oldTransition)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatesPackage.COMPONENT_TRANSITION__TRANSITION, oldTransition, transition));
      }
    }
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transition basicGetTransition()
  {
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTransition(Transition newTransition)
  {
    Transition oldTransition = transition;
    transition = newTransition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__TRANSITION, oldTransition, transition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTimeoutInMilliseconds()
  {
    return timeoutInMilliseconds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeoutInMilliseconds(int newTimeoutInMilliseconds)
  {
    int oldTimeoutInMilliseconds = timeoutInMilliseconds;
    timeoutInMilliseconds = newTimeoutInMilliseconds;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__TIMEOUT_IN_MILLISECONDS, oldTimeoutInMilliseconds, timeoutInMilliseconds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMaxretries()
  {
    return maxretries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxretries(int newMaxretries)
  {
    int oldMaxretries = maxretries;
    maxretries = newMaxretries;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__MAXRETRIES, oldMaxretries, maxretries));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateDependency getStateDependency()
  {
    return stateDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStateDependency(StateDependency newStateDependency, NotificationChain msgs)
  {
    StateDependency oldStateDependency = stateDependency;
    stateDependency = newStateDependency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY, oldStateDependency, newStateDependency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStateDependency(StateDependency newStateDependency)
  {
    if (newStateDependency != stateDependency)
    {
      NotificationChain msgs = null;
      if (stateDependency != null)
        msgs = ((InternalEObject)stateDependency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY, null, msgs);
      if (newStateDependency != null)
        msgs = ((InternalEObject)newStateDependency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY, null, msgs);
      msgs = basicSetStateDependency(newStateDependency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY, newStateDependency, newStateDependency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FeatureDependency getFeatureDependency()
  {
    return featureDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFeatureDependency(FeatureDependency newFeatureDependency, NotificationChain msgs)
  {
    FeatureDependency oldFeatureDependency = featureDependency;
    featureDependency = newFeatureDependency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY, oldFeatureDependency, newFeatureDependency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFeatureDependency(FeatureDependency newFeatureDependency)
  {
    if (newFeatureDependency != featureDependency)
    {
      NotificationChain msgs = null;
      if (featureDependency != null)
        msgs = ((InternalEObject)featureDependency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY, null, msgs);
      if (newFeatureDependency != null)
        msgs = ((InternalEObject)newFeatureDependency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY, null, msgs);
      msgs = basicSetFeatureDependency(newFeatureDependency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY, newFeatureDependency, newFeatureDependency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY:
        return basicSetStateDependency(null, msgs);
      case StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY:
        return basicSetFeatureDependency(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_TRANSITION__ESSENTIAL:
        return isEssential();
      case StatesPackage.COMPONENT_TRANSITION__TRANSITION:
        if (resolve) return getTransition();
        return basicGetTransition();
      case StatesPackage.COMPONENT_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        return getTimeoutInMilliseconds();
      case StatesPackage.COMPONENT_TRANSITION__MAXRETRIES:
        return getMaxretries();
      case StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY:
        return getStateDependency();
      case StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY:
        return getFeatureDependency();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_TRANSITION__ESSENTIAL:
        setEssential((Boolean)newValue);
        return;
      case StatesPackage.COMPONENT_TRANSITION__TRANSITION:
        setTransition((Transition)newValue);
        return;
      case StatesPackage.COMPONENT_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        setTimeoutInMilliseconds((Integer)newValue);
        return;
      case StatesPackage.COMPONENT_TRANSITION__MAXRETRIES:
        setMaxretries((Integer)newValue);
        return;
      case StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY:
        setStateDependency((StateDependency)newValue);
        return;
      case StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY:
        setFeatureDependency((FeatureDependency)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_TRANSITION__ESSENTIAL:
        setEssential(ESSENTIAL_EDEFAULT);
        return;
      case StatesPackage.COMPONENT_TRANSITION__TRANSITION:
        setTransition((Transition)null);
        return;
      case StatesPackage.COMPONENT_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        setTimeoutInMilliseconds(TIMEOUT_IN_MILLISECONDS_EDEFAULT);
        return;
      case StatesPackage.COMPONENT_TRANSITION__MAXRETRIES:
        setMaxretries(MAXRETRIES_EDEFAULT);
        return;
      case StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY:
        setStateDependency((StateDependency)null);
        return;
      case StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY:
        setFeatureDependency((FeatureDependency)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.COMPONENT_TRANSITION__ESSENTIAL:
        return essential != ESSENTIAL_EDEFAULT;
      case StatesPackage.COMPONENT_TRANSITION__TRANSITION:
        return transition != null;
      case StatesPackage.COMPONENT_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        return timeoutInMilliseconds != TIMEOUT_IN_MILLISECONDS_EDEFAULT;
      case StatesPackage.COMPONENT_TRANSITION__MAXRETRIES:
        return maxretries != MAXRETRIES_EDEFAULT;
      case StatesPackage.COMPONENT_TRANSITION__STATE_DEPENDENCY:
        return stateDependency != null;
      case StatesPackage.COMPONENT_TRANSITION__FEATURE_DEPENDENCY:
        return featureDependency != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (essential: ");
    result.append(essential);
    result.append(", timeoutInMilliseconds: ");
    result.append(timeoutInMilliseconds);
    result.append(", maxretries: ");
    result.append(maxretries);
    result.append(')');
    return result.toString();
  }

} //ComponentTransitionImpl
