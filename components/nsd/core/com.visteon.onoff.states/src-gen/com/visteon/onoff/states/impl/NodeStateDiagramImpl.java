/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.states.impl;

import com.visteon.onoff.states.NodeState;
import com.visteon.onoff.states.NodeStateDiagram;
import com.visteon.onoff.states.NodeTransition;
import com.visteon.onoff.states.StatesPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node State Diagram</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateDiagramImpl#getGEdgeWeight <em>GEdge Weight</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateDiagramImpl#getGTransitionTimeoutInMilliseconds <em>GTransition Timeout In Milliseconds</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateDiagramImpl#getStates <em>States</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateDiagramImpl#getTransitions <em>Transitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeStateDiagramImpl extends MinimalEObjectImpl.Container implements NodeStateDiagram
{
  /**
   * The default value of the '{@link #getGEdgeWeight() <em>GEdge Weight</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGEdgeWeight()
   * @generated
   * @ordered
   */
  protected static final int GEDGE_WEIGHT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getGEdgeWeight() <em>GEdge Weight</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGEdgeWeight()
   * @generated
   * @ordered
   */
  protected int gEdgeWeight = GEDGE_WEIGHT_EDEFAULT;

  /**
   * The default value of the '{@link #getGTransitionTimeoutInMilliseconds() <em>GTransition Timeout In Milliseconds</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGTransitionTimeoutInMilliseconds()
   * @generated
   * @ordered
   */
  protected static final int GTRANSITION_TIMEOUT_IN_MILLISECONDS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getGTransitionTimeoutInMilliseconds() <em>GTransition Timeout In Milliseconds</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGTransitionTimeoutInMilliseconds()
   * @generated
   * @ordered
   */
  protected int gTransitionTimeoutInMilliseconds = GTRANSITION_TIMEOUT_IN_MILLISECONDS_EDEFAULT;

  /**
   * The cached value of the '{@link #getStates() <em>States</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStates()
   * @generated
   * @ordered
   */
  protected EList<NodeState> states;

  /**
   * The cached value of the '{@link #getTransitions() <em>Transitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitions()
   * @generated
   * @ordered
   */
  protected EList<NodeTransition> transitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeStateDiagramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatesPackage.Literals.NODE_STATE_DIAGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getGEdgeWeight()
  {
    return gEdgeWeight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGEdgeWeight(int newGEdgeWeight)
  {
    int oldGEdgeWeight = gEdgeWeight;
    gEdgeWeight = newGEdgeWeight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_STATE_DIAGRAM__GEDGE_WEIGHT, oldGEdgeWeight, gEdgeWeight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getGTransitionTimeoutInMilliseconds()
  {
    return gTransitionTimeoutInMilliseconds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGTransitionTimeoutInMilliseconds(int newGTransitionTimeoutInMilliseconds)
  {
    int oldGTransitionTimeoutInMilliseconds = gTransitionTimeoutInMilliseconds;
    gTransitionTimeoutInMilliseconds = newGTransitionTimeoutInMilliseconds;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_STATE_DIAGRAM__GTRANSITION_TIMEOUT_IN_MILLISECONDS, oldGTransitionTimeoutInMilliseconds, gTransitionTimeoutInMilliseconds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NodeState> getStates()
  {
    if (states == null)
    {
      states = new EObjectContainmentEList<NodeState>(NodeState.class, this, StatesPackage.NODE_STATE_DIAGRAM__STATES);
    }
    return states;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NodeTransition> getTransitions()
  {
    if (transitions == null)
    {
      transitions = new EObjectContainmentEList<NodeTransition>(NodeTransition.class, this, StatesPackage.NODE_STATE_DIAGRAM__TRANSITIONS);
    }
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_DIAGRAM__STATES:
        return ((InternalEList<?>)getStates()).basicRemove(otherEnd, msgs);
      case StatesPackage.NODE_STATE_DIAGRAM__TRANSITIONS:
        return ((InternalEList<?>)getTransitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_DIAGRAM__GEDGE_WEIGHT:
        return getGEdgeWeight();
      case StatesPackage.NODE_STATE_DIAGRAM__GTRANSITION_TIMEOUT_IN_MILLISECONDS:
        return getGTransitionTimeoutInMilliseconds();
      case StatesPackage.NODE_STATE_DIAGRAM__STATES:
        return getStates();
      case StatesPackage.NODE_STATE_DIAGRAM__TRANSITIONS:
        return getTransitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_DIAGRAM__GEDGE_WEIGHT:
        setGEdgeWeight((Integer)newValue);
        return;
      case StatesPackage.NODE_STATE_DIAGRAM__GTRANSITION_TIMEOUT_IN_MILLISECONDS:
        setGTransitionTimeoutInMilliseconds((Integer)newValue);
        return;
      case StatesPackage.NODE_STATE_DIAGRAM__STATES:
        getStates().clear();
        getStates().addAll((Collection<? extends NodeState>)newValue);
        return;
      case StatesPackage.NODE_STATE_DIAGRAM__TRANSITIONS:
        getTransitions().clear();
        getTransitions().addAll((Collection<? extends NodeTransition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_DIAGRAM__GEDGE_WEIGHT:
        setGEdgeWeight(GEDGE_WEIGHT_EDEFAULT);
        return;
      case StatesPackage.NODE_STATE_DIAGRAM__GTRANSITION_TIMEOUT_IN_MILLISECONDS:
        setGTransitionTimeoutInMilliseconds(GTRANSITION_TIMEOUT_IN_MILLISECONDS_EDEFAULT);
        return;
      case StatesPackage.NODE_STATE_DIAGRAM__STATES:
        getStates().clear();
        return;
      case StatesPackage.NODE_STATE_DIAGRAM__TRANSITIONS:
        getTransitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_DIAGRAM__GEDGE_WEIGHT:
        return gEdgeWeight != GEDGE_WEIGHT_EDEFAULT;
      case StatesPackage.NODE_STATE_DIAGRAM__GTRANSITION_TIMEOUT_IN_MILLISECONDS:
        return gTransitionTimeoutInMilliseconds != GTRANSITION_TIMEOUT_IN_MILLISECONDS_EDEFAULT;
      case StatesPackage.NODE_STATE_DIAGRAM__STATES:
        return states != null && !states.isEmpty();
      case StatesPackage.NODE_STATE_DIAGRAM__TRANSITIONS:
        return transitions != null && !transitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (gEdgeWeight: ");
    result.append(gEdgeWeight);
    result.append(", gTransitionTimeoutInMilliseconds: ");
    result.append(gTransitionTimeoutInMilliseconds);
    result.append(')');
    return result.toString();
  }

} //NodeStateDiagramImpl
