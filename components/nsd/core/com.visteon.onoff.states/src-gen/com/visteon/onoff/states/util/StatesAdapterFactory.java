/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.states.util;

import com.visteon.onoff.states.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.visteon.onoff.states.StatesPackage
 * @generated
 */
public class StatesAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static StatesPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatesAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = StatesPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatesSwitch<Adapter> modelSwitch =
    new StatesSwitch<Adapter>()
    {
      @Override
      public Adapter caseNodeStateConfiguration(NodeStateConfiguration object)
      {
        return createNodeStateConfigurationAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseNodeStateDiagram(NodeStateDiagram object)
      {
        return createNodeStateDiagramAdapter();
      }
      @Override
      public Adapter caseNodeState(NodeState object)
      {
        return createNodeStateAdapter();
      }
      @Override
      public Adapter caseNodeTransition(NodeTransition object)
      {
        return createNodeTransitionAdapter();
      }
      @Override
      public Adapter caseClientConfiguration(ClientConfiguration object)
      {
        return createClientConfigurationAdapter();
      }
      @Override
      public Adapter caseComponentTransition(ComponentTransition object)
      {
        return createComponentTransitionAdapter();
      }
      @Override
      public Adapter caseComponentState(ComponentState object)
      {
        return createComponentStateAdapter();
      }
      @Override
      public Adapter caseStateDependency(StateDependency object)
      {
        return createStateDependencyAdapter();
      }
      @Override
      public Adapter caseTransitionDependency(TransitionDependency object)
      {
        return createTransitionDependencyAdapter();
      }
      @Override
      public Adapter caseFeatureDependency(FeatureDependency object)
      {
        return createFeatureDependencyAdapter();
      }
      @Override
      public Adapter caseNodeStateAssociation(NodeStateAssociation object)
      {
        return createNodeStateAssociationAdapter();
      }
      @Override
      public Adapter caseComponentFeature(ComponentFeature object)
      {
        return createComponentFeatureAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.NodeStateConfiguration <em>Node State Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.NodeStateConfiguration
   * @generated
   */
  public Adapter createNodeStateConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.NodeStateDiagram <em>Node State Diagram</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.NodeStateDiagram
   * @generated
   */
  public Adapter createNodeStateDiagramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.NodeState <em>Node State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.NodeState
   * @generated
   */
  public Adapter createNodeStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.NodeTransition <em>Node Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.NodeTransition
   * @generated
   */
  public Adapter createNodeTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.ClientConfiguration <em>Client Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.ClientConfiguration
   * @generated
   */
  public Adapter createClientConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.ComponentTransition <em>Component Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.ComponentTransition
   * @generated
   */
  public Adapter createComponentTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.ComponentState <em>Component State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.ComponentState
   * @generated
   */
  public Adapter createComponentStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.StateDependency <em>State Dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.StateDependency
   * @generated
   */
  public Adapter createStateDependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.TransitionDependency <em>Transition Dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.TransitionDependency
   * @generated
   */
  public Adapter createTransitionDependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.FeatureDependency <em>Feature Dependency</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.FeatureDependency
   * @generated
   */
  public Adapter createFeatureDependencyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.NodeStateAssociation <em>Node State Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.NodeStateAssociation
   * @generated
   */
  public Adapter createNodeStateAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.visteon.onoff.states.ComponentFeature <em>Component Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.visteon.onoff.states.ComponentFeature
   * @generated
   */
  public Adapter createComponentFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //StatesAdapterFactory
