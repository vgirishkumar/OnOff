/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.states.impl;

import com.visteon.onoff.states.NodeState;
import com.visteon.onoff.states.NodeTransition;
import com.visteon.onoff.states.StatesPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node Transition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.visteon.onoff.states.impl.NodeTransitionImpl#isEssential <em>Essential</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeTransitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeTransitionImpl#getFromState <em>From State</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeTransitionImpl#getToState <em>To State</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeTransitionImpl#getEdgeweight <em>Edgeweight</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeTransitionImpl#getTimeoutInMilliseconds <em>Timeout In Milliseconds</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeTransitionImpl extends MinimalEObjectImpl.Container implements NodeTransition
{
  /**
   * The default value of the '{@link #isEssential() <em>Essential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEssential()
   * @generated
   * @ordered
   */
  protected static final boolean ESSENTIAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEssential() <em>Essential</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEssential()
   * @generated
   * @ordered
   */
  protected boolean essential = ESSENTIAL_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getFromState() <em>From State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromState()
   * @generated
   * @ordered
   */
  protected NodeState fromState;

  /**
   * The cached value of the '{@link #getToState() <em>To State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToState()
   * @generated
   * @ordered
   */
  protected NodeState toState;

  /**
   * The default value of the '{@link #getEdgeweight() <em>Edgeweight</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEdgeweight()
   * @generated
   * @ordered
   */
  protected static final int EDGEWEIGHT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getEdgeweight() <em>Edgeweight</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEdgeweight()
   * @generated
   * @ordered
   */
  protected int edgeweight = EDGEWEIGHT_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeoutInMilliseconds() <em>Timeout In Milliseconds</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeoutInMilliseconds()
   * @generated
   * @ordered
   */
  protected static final int TIMEOUT_IN_MILLISECONDS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTimeoutInMilliseconds() <em>Timeout In Milliseconds</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeoutInMilliseconds()
   * @generated
   * @ordered
   */
  protected int timeoutInMilliseconds = TIMEOUT_IN_MILLISECONDS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeTransitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatesPackage.Literals.NODE_TRANSITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isEssential()
  {
    return essential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEssential(boolean newEssential)
  {
    boolean oldEssential = essential;
    essential = newEssential;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_TRANSITION__ESSENTIAL, oldEssential, essential));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_TRANSITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeState getFromState()
  {
    if (fromState != null && fromState.eIsProxy())
    {
      InternalEObject oldFromState = (InternalEObject)fromState;
      fromState = (NodeState)eResolveProxy(oldFromState);
      if (fromState != oldFromState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatesPackage.NODE_TRANSITION__FROM_STATE, oldFromState, fromState));
      }
    }
    return fromState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeState basicGetFromState()
  {
    return fromState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFromState(NodeState newFromState)
  {
    NodeState oldFromState = fromState;
    fromState = newFromState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_TRANSITION__FROM_STATE, oldFromState, fromState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeState getToState()
  {
    if (toState != null && toState.eIsProxy())
    {
      InternalEObject oldToState = (InternalEObject)toState;
      toState = (NodeState)eResolveProxy(oldToState);
      if (toState != oldToState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatesPackage.NODE_TRANSITION__TO_STATE, oldToState, toState));
      }
    }
    return toState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeState basicGetToState()
  {
    return toState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setToState(NodeState newToState)
  {
    NodeState oldToState = toState;
    toState = newToState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_TRANSITION__TO_STATE, oldToState, toState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getEdgeweight()
  {
    return edgeweight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEdgeweight(int newEdgeweight)
  {
    int oldEdgeweight = edgeweight;
    edgeweight = newEdgeweight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_TRANSITION__EDGEWEIGHT, oldEdgeweight, edgeweight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTimeoutInMilliseconds()
  {
    return timeoutInMilliseconds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeoutInMilliseconds(int newTimeoutInMilliseconds)
  {
    int oldTimeoutInMilliseconds = timeoutInMilliseconds;
    timeoutInMilliseconds = newTimeoutInMilliseconds;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_TRANSITION__TIMEOUT_IN_MILLISECONDS, oldTimeoutInMilliseconds, timeoutInMilliseconds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_TRANSITION__ESSENTIAL:
        return isEssential();
      case StatesPackage.NODE_TRANSITION__NAME:
        return getName();
      case StatesPackage.NODE_TRANSITION__FROM_STATE:
        if (resolve) return getFromState();
        return basicGetFromState();
      case StatesPackage.NODE_TRANSITION__TO_STATE:
        if (resolve) return getToState();
        return basicGetToState();
      case StatesPackage.NODE_TRANSITION__EDGEWEIGHT:
        return getEdgeweight();
      case StatesPackage.NODE_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        return getTimeoutInMilliseconds();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_TRANSITION__ESSENTIAL:
        setEssential((Boolean)newValue);
        return;
      case StatesPackage.NODE_TRANSITION__NAME:
        setName((String)newValue);
        return;
      case StatesPackage.NODE_TRANSITION__FROM_STATE:
        setFromState((NodeState)newValue);
        return;
      case StatesPackage.NODE_TRANSITION__TO_STATE:
        setToState((NodeState)newValue);
        return;
      case StatesPackage.NODE_TRANSITION__EDGEWEIGHT:
        setEdgeweight((Integer)newValue);
        return;
      case StatesPackage.NODE_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        setTimeoutInMilliseconds((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_TRANSITION__ESSENTIAL:
        setEssential(ESSENTIAL_EDEFAULT);
        return;
      case StatesPackage.NODE_TRANSITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case StatesPackage.NODE_TRANSITION__FROM_STATE:
        setFromState((NodeState)null);
        return;
      case StatesPackage.NODE_TRANSITION__TO_STATE:
        setToState((NodeState)null);
        return;
      case StatesPackage.NODE_TRANSITION__EDGEWEIGHT:
        setEdgeweight(EDGEWEIGHT_EDEFAULT);
        return;
      case StatesPackage.NODE_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        setTimeoutInMilliseconds(TIMEOUT_IN_MILLISECONDS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_TRANSITION__ESSENTIAL:
        return essential != ESSENTIAL_EDEFAULT;
      case StatesPackage.NODE_TRANSITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case StatesPackage.NODE_TRANSITION__FROM_STATE:
        return fromState != null;
      case StatesPackage.NODE_TRANSITION__TO_STATE:
        return toState != null;
      case StatesPackage.NODE_TRANSITION__EDGEWEIGHT:
        return edgeweight != EDGEWEIGHT_EDEFAULT;
      case StatesPackage.NODE_TRANSITION__TIMEOUT_IN_MILLISECONDS:
        return timeoutInMilliseconds != TIMEOUT_IN_MILLISECONDS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (essential: ");
    result.append(essential);
    result.append(", name: ");
    result.append(name);
    result.append(", edgeweight: ");
    result.append(edgeweight);
    result.append(", timeoutInMilliseconds: ");
    result.append(timeoutInMilliseconds);
    result.append(')');
    return result.toString();
  }

} //NodeTransitionImpl
