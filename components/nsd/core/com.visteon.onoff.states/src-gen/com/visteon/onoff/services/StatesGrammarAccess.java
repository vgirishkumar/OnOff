/*
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StatesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class NodeStateConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeStateConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNsdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNsdNodeStateDiagramParserRuleCall_0_0 = (RuleCall)cNsdAssignment_0.eContents().get(0);
		private final Assignment cClientConfigsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClientConfigsClientConfigurationParserRuleCall_1_0 = (RuleCall)cClientConfigsAssignment_1.eContents().get(0);
		
		//NodeStateConfiguration:
		//	nsd=NodeStateDiagram
		//	clientConfigs+=ClientConfiguration*;
		@Override public ParserRule getRule() { return rule; }
		
		//nsd=NodeStateDiagram clientConfigs+=ClientConfiguration*
		public Group getGroup() { return cGroup; }
		
		//nsd=NodeStateDiagram
		public Assignment getNsdAssignment_0() { return cNsdAssignment_0; }
		
		//NodeStateDiagram
		public RuleCall getNsdNodeStateDiagramParserRuleCall_0_0() { return cNsdNodeStateDiagramParserRuleCall_0_0; }
		
		//clientConfigs+=ClientConfiguration*
		public Assignment getClientConfigsAssignment_1() { return cClientConfigsAssignment_1; }
		
		//ClientConfiguration
		public RuleCall getClientConfigsClientConfigurationParserRuleCall_1_0() { return cClientConfigsClientConfigurationParserRuleCall_1_0; }
	}
	public class NodeStateDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeStateDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeStateDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNodeStateDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGlobalEdgeweightKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGEdgeWeightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGEdgeWeightINTTerminalRuleCall_3_1_0 = (RuleCall)cGEdgeWeightAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGlobalTransitionTimeoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGTransitionTimeoutInMillisecondsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGTransitionTimeoutInMillisecondsINTTerminalRuleCall_4_1_0 = (RuleCall)cGTransitionTimeoutInMillisecondsAssignment_4_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cStatesNodeStateParserRuleCall_5_0_0 = (RuleCall)cStatesAssignment_5_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTransitionsNodeTransitionParserRuleCall_5_1_0 = (RuleCall)cTransitionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NodeStateDiagram:
		//	{NodeStateDiagram}
		//	'NodeStateDiagram' '{' ('globalEdgeweight' gEdgeWeight=INT)? ('globalTransitionTimeout'
		//	gTransitionTimeoutInMilliseconds=INT)? (states+=NodeState | transitions+=NodeTransition)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{NodeStateDiagram} 'NodeStateDiagram' '{' ('globalEdgeweight' gEdgeWeight=INT)? ('globalTransitionTimeout'
		//gTransitionTimeoutInMilliseconds=INT)? (states+=NodeState | transitions+=NodeTransition)* '}'
		public Group getGroup() { return cGroup; }
		
		//{NodeStateDiagram}
		public Action getNodeStateDiagramAction_0() { return cNodeStateDiagramAction_0; }
		
		//'NodeStateDiagram'
		public Keyword getNodeStateDiagramKeyword_1() { return cNodeStateDiagramKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('globalEdgeweight' gEdgeWeight=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'globalEdgeweight'
		public Keyword getGlobalEdgeweightKeyword_3_0() { return cGlobalEdgeweightKeyword_3_0; }
		
		//gEdgeWeight=INT
		public Assignment getGEdgeWeightAssignment_3_1() { return cGEdgeWeightAssignment_3_1; }
		
		//INT
		public RuleCall getGEdgeWeightINTTerminalRuleCall_3_1_0() { return cGEdgeWeightINTTerminalRuleCall_3_1_0; }
		
		//('globalTransitionTimeout' gTransitionTimeoutInMilliseconds=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'globalTransitionTimeout'
		public Keyword getGlobalTransitionTimeoutKeyword_4_0() { return cGlobalTransitionTimeoutKeyword_4_0; }
		
		//gTransitionTimeoutInMilliseconds=INT
		public Assignment getGTransitionTimeoutInMillisecondsAssignment_4_1() { return cGTransitionTimeoutInMillisecondsAssignment_4_1; }
		
		//INT
		public RuleCall getGTransitionTimeoutInMillisecondsINTTerminalRuleCall_4_1_0() { return cGTransitionTimeoutInMillisecondsINTTerminalRuleCall_4_1_0; }
		
		//(states+=NodeState | transitions+=NodeTransition)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//states+=NodeState
		public Assignment getStatesAssignment_5_0() { return cStatesAssignment_5_0; }
		
		//NodeState
		public RuleCall getStatesNodeStateParserRuleCall_5_0_0() { return cStatesNodeStateParserRuleCall_5_0_0; }
		
		//transitions+=NodeTransition
		public Assignment getTransitionsAssignment_5_1() { return cTransitionsAssignment_5_1; }
		
		//NodeTransition
		public RuleCall getTransitionsNodeTransitionParserRuleCall_5_1_0() { return cTransitionsNodeTransitionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class NodeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitialInitialKeyword_0_0 = (Keyword)cInitialAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//NodeState:
		//	initial?='initial'? 'State' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//initial?='initial'? 'State' name=ID
		public Group getGroup() { return cGroup; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_0() { return cInitialAssignment_0; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_0_0() { return cInitialInitialKeyword_0_0; }
		
		//'State'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class NodeTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEssentialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEssentialEssentialKeyword_0_0 = (Keyword)cEssentialAssignment_0.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFromStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cFromStateNodeStateCrossReference_4_0 = (CrossReference)cFromStateAssignment_4.eContents().get(0);
		private final RuleCall cFromStateNodeStateIDTerminalRuleCall_4_0_1 = (RuleCall)cFromStateNodeStateCrossReference_4_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cToStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cToStateNodeStateCrossReference_6_0 = (CrossReference)cToStateAssignment_6.eContents().get(0);
		private final RuleCall cToStateNodeStateIDTerminalRuleCall_6_0_1 = (RuleCall)cToStateNodeStateCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cEdgeweightKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cEdgeweightAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cEdgeweightINTTerminalRuleCall_7_1_1_0 = (RuleCall)cEdgeweightAssignment_7_1_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cTimeoutKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cTimeoutInMillisecondsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cTimeoutInMillisecondsINTTerminalRuleCall_7_2_1_0 = (RuleCall)cTimeoutInMillisecondsAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//NodeTransition:
		//	essential?='essential'? 'Transition' name=ID ':' fromState=[NodeState] '->' toState=[NodeState] ('{' ('edgeweight'
		//	edgeweight=INT)? ('timeout' timeoutInMilliseconds=INT)?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//essential?='essential'? 'Transition' name=ID ':' fromState=[NodeState] '->' toState=[NodeState] ('{' ('edgeweight'
		//edgeweight=INT)? ('timeout' timeoutInMilliseconds=INT)? '}')?
		public Group getGroup() { return cGroup; }
		
		//essential?='essential'?
		public Assignment getEssentialAssignment_0() { return cEssentialAssignment_0; }
		
		//'essential'
		public Keyword getEssentialEssentialKeyword_0_0() { return cEssentialEssentialKeyword_0_0; }
		
		//'Transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//fromState=[NodeState]
		public Assignment getFromStateAssignment_4() { return cFromStateAssignment_4; }
		
		//[NodeState]
		public CrossReference getFromStateNodeStateCrossReference_4_0() { return cFromStateNodeStateCrossReference_4_0; }
		
		//ID
		public RuleCall getFromStateNodeStateIDTerminalRuleCall_4_0_1() { return cFromStateNodeStateIDTerminalRuleCall_4_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }
		
		//toState=[NodeState]
		public Assignment getToStateAssignment_6() { return cToStateAssignment_6; }
		
		//[NodeState]
		public CrossReference getToStateNodeStateCrossReference_6_0() { return cToStateNodeStateCrossReference_6_0; }
		
		//ID
		public RuleCall getToStateNodeStateIDTerminalRuleCall_6_0_1() { return cToStateNodeStateIDTerminalRuleCall_6_0_1; }
		
		//('{' ('edgeweight' edgeweight=INT)? ('timeout' timeoutInMilliseconds=INT)? '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }
		
		//('edgeweight' edgeweight=INT)?
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//'edgeweight'
		public Keyword getEdgeweightKeyword_7_1_0() { return cEdgeweightKeyword_7_1_0; }
		
		//edgeweight=INT
		public Assignment getEdgeweightAssignment_7_1_1() { return cEdgeweightAssignment_7_1_1; }
		
		//INT
		public RuleCall getEdgeweightINTTerminalRuleCall_7_1_1_0() { return cEdgeweightINTTerminalRuleCall_7_1_1_0; }
		
		//('timeout' timeoutInMilliseconds=INT)?
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_7_2_0() { return cTimeoutKeyword_7_2_0; }
		
		//timeoutInMilliseconds=INT
		public Assignment getTimeoutInMillisecondsAssignment_7_2_1() { return cTimeoutInMillisecondsAssignment_7_2_1; }
		
		//INT
		public RuleCall getTimeoutInMillisecondsINTTerminalRuleCall_7_2_1_0() { return cTimeoutInMillisecondsINTTerminalRuleCall_7_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class ClientConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.ClientConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCoomKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoomRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCoomRefComponentOnOffManifestCrossReference_4_0 = (CrossReference)cCoomRefAssignment_4.eContents().get(0);
		private final RuleCall cCoomRefComponentOnOffManifestIDTerminalRuleCall_4_0_1 = (RuleCall)cCoomRefComponentOnOffManifestCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cClientTransitionTimeoutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTransTimeoutInMillisecondsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTransTimeoutInMillisecondsINTTerminalRuleCall_5_1_0 = (RuleCall)cTransTimeoutInMillisecondsAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cTransitionsAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cTransitionsComponentTransitionParserRuleCall_6_0_0 = (RuleCall)cTransitionsAssignment_6_0.eContents().get(0);
		private final Assignment cStatesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cStatesComponentStateParserRuleCall_6_1_0 = (RuleCall)cStatesAssignment_6_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cFeaturesComponentFeatureParserRuleCall_6_2_0 = (RuleCall)cFeaturesAssignment_6_2.eContents().get(0);
		private final Assignment cNodeStateAssociationsAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cNodeStateAssociationsNodeStateAssociationParserRuleCall_6_3_0 = (RuleCall)cNodeStateAssociationsAssignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ClientConfiguration:
		//	'Client' name=ID // instance name - scope coming from COOM
		//	'{'
		//	'coom' coomRef=[coom::ComponentOnOffManifest] ('clientTransitionTimeout' transTimeoutInMilliseconds=INT)?
		//	(transitions+=ComponentTransition | states+=ComponentState | features+=ComponentFeature |
		//	nodeStateAssociations+=NodeStateAssociation)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Client' name=ID // instance name - scope coming from COOM
		//'{' 'coom' coomRef=[coom::ComponentOnOffManifest] ('clientTransitionTimeout' transTimeoutInMilliseconds=INT)?
		//(transitions+=ComponentTransition | states+=ComponentState | features+=ComponentFeature |
		//nodeStateAssociations+=NodeStateAssociation)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Client'
		public Keyword getClientKeyword_0() { return cClientKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//// instance name - scope coming from COOM
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'coom'
		public Keyword getCoomKeyword_3() { return cCoomKeyword_3; }
		
		//coomRef=[coom::ComponentOnOffManifest]
		public Assignment getCoomRefAssignment_4() { return cCoomRefAssignment_4; }
		
		//[coom::ComponentOnOffManifest]
		public CrossReference getCoomRefComponentOnOffManifestCrossReference_4_0() { return cCoomRefComponentOnOffManifestCrossReference_4_0; }
		
		//ID
		public RuleCall getCoomRefComponentOnOffManifestIDTerminalRuleCall_4_0_1() { return cCoomRefComponentOnOffManifestIDTerminalRuleCall_4_0_1; }
		
		//('clientTransitionTimeout' transTimeoutInMilliseconds=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'clientTransitionTimeout'
		public Keyword getClientTransitionTimeoutKeyword_5_0() { return cClientTransitionTimeoutKeyword_5_0; }
		
		//transTimeoutInMilliseconds=INT
		public Assignment getTransTimeoutInMillisecondsAssignment_5_1() { return cTransTimeoutInMillisecondsAssignment_5_1; }
		
		//INT
		public RuleCall getTransTimeoutInMillisecondsINTTerminalRuleCall_5_1_0() { return cTransTimeoutInMillisecondsINTTerminalRuleCall_5_1_0; }
		
		//(transitions+=ComponentTransition | states+=ComponentState | features+=ComponentFeature |
		//nodeStateAssociations+=NodeStateAssociation)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//transitions+=ComponentTransition
		public Assignment getTransitionsAssignment_6_0() { return cTransitionsAssignment_6_0; }
		
		//ComponentTransition
		public RuleCall getTransitionsComponentTransitionParserRuleCall_6_0_0() { return cTransitionsComponentTransitionParserRuleCall_6_0_0; }
		
		//states+=ComponentState
		public Assignment getStatesAssignment_6_1() { return cStatesAssignment_6_1; }
		
		//ComponentState
		public RuleCall getStatesComponentStateParserRuleCall_6_1_0() { return cStatesComponentStateParserRuleCall_6_1_0; }
		
		//features+=ComponentFeature
		public Assignment getFeaturesAssignment_6_2() { return cFeaturesAssignment_6_2; }
		
		//ComponentFeature
		public RuleCall getFeaturesComponentFeatureParserRuleCall_6_2_0() { return cFeaturesComponentFeatureParserRuleCall_6_2_0; }
		
		//nodeStateAssociations+=NodeStateAssociation
		public Assignment getNodeStateAssociationsAssignment_6_3() { return cNodeStateAssociationsAssignment_6_3; }
		
		//NodeStateAssociation
		public RuleCall getNodeStateAssociationsNodeStateAssociationParserRuleCall_6_3_0() { return cNodeStateAssociationsNodeStateAssociationParserRuleCall_6_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ComponentTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.ComponentTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEssentialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEssentialEssentialKeyword_0_0 = (Keyword)cEssentialAssignment_0.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTransitionTransitionCrossReference_2_0 = (CrossReference)cTransitionAssignment_2.eContents().get(0);
		private final RuleCall cTransitionTransitionFQNParserRuleCall_2_0_1 = (RuleCall)cTransitionTransitionCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTimeoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTimeoutInMillisecondsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTimeoutInMillisecondsINTTerminalRuleCall_4_1_0 = (RuleCall)cTimeoutInMillisecondsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMaxRetriesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMaxretriesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMaxretriesINTTerminalRuleCall_5_1_0 = (RuleCall)cMaxretriesAssignment_5_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_6 = (UnorderedGroup)cGroup.eContents().get(6);
		private final Assignment cStateDependencyAssignment_6_0 = (Assignment)cUnorderedGroup_6.eContents().get(0);
		private final RuleCall cStateDependencyStateDependencyParserRuleCall_6_0_0 = (RuleCall)cStateDependencyAssignment_6_0.eContents().get(0);
		private final Assignment cFeatureDependencyAssignment_6_1 = (Assignment)cUnorderedGroup_6.eContents().get(1);
		private final RuleCall cFeatureDependencyFeatureDependencyParserRuleCall_6_1_0 = (RuleCall)cFeatureDependencyAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ComponentTransition:
		//	essential?='essential'? 'Transition' transition=[coom::Transition|FQN]
		//	'{' ('timeout' timeoutInMilliseconds=INT)? ('max-retries' maxretries=INT)? (stateDependency=StateDependency? &
		//	featureDependency=FeatureDependency?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//essential?='essential'? 'Transition' transition=[coom::Transition|FQN] '{' ('timeout' timeoutInMilliseconds=INT)?
		//('max-retries' maxretries=INT)? (stateDependency=StateDependency? & featureDependency=FeatureDependency?) '}'
		public Group getGroup() { return cGroup; }
		
		//essential?='essential'?
		public Assignment getEssentialAssignment_0() { return cEssentialAssignment_0; }
		
		//'essential'
		public Keyword getEssentialEssentialKeyword_0_0() { return cEssentialEssentialKeyword_0_0; }
		
		//'Transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//transition=[coom::Transition|FQN]
		public Assignment getTransitionAssignment_2() { return cTransitionAssignment_2; }
		
		//[coom::Transition|FQN]
		public CrossReference getTransitionTransitionCrossReference_2_0() { return cTransitionTransitionCrossReference_2_0; }
		
		//FQN
		public RuleCall getTransitionTransitionFQNParserRuleCall_2_0_1() { return cTransitionTransitionFQNParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('timeout' timeoutInMilliseconds=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_4_0() { return cTimeoutKeyword_4_0; }
		
		//timeoutInMilliseconds=INT
		public Assignment getTimeoutInMillisecondsAssignment_4_1() { return cTimeoutInMillisecondsAssignment_4_1; }
		
		//INT
		public RuleCall getTimeoutInMillisecondsINTTerminalRuleCall_4_1_0() { return cTimeoutInMillisecondsINTTerminalRuleCall_4_1_0; }
		
		//('max-retries' maxretries=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'max-retries'
		public Keyword getMaxRetriesKeyword_5_0() { return cMaxRetriesKeyword_5_0; }
		
		//maxretries=INT
		public Assignment getMaxretriesAssignment_5_1() { return cMaxretriesAssignment_5_1; }
		
		//INT
		public RuleCall getMaxretriesINTTerminalRuleCall_5_1_0() { return cMaxretriesINTTerminalRuleCall_5_1_0; }
		
		//stateDependency=StateDependency? & featureDependency=FeatureDependency?
		public UnorderedGroup getUnorderedGroup_6() { return cUnorderedGroup_6; }
		
		//stateDependency=StateDependency?
		public Assignment getStateDependencyAssignment_6_0() { return cStateDependencyAssignment_6_0; }
		
		//StateDependency
		public RuleCall getStateDependencyStateDependencyParserRuleCall_6_0_0() { return cStateDependencyStateDependencyParserRuleCall_6_0_0; }
		
		//featureDependency=FeatureDependency?
		public Assignment getFeatureDependencyAssignment_6_1() { return cFeatureDependencyAssignment_6_1; }
		
		//FeatureDependency
		public RuleCall getFeatureDependencyFeatureDependencyParserRuleCall_6_1_0() { return cFeatureDependencyFeatureDependencyParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ComponentStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.ComponentState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateStateCrossReference_1_0 = (CrossReference)cStateAssignment_1.eContents().get(0);
		private final RuleCall cStateStateFQNParserRuleCall_1_0_1 = (RuleCall)cStateStateCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cStateDependencyAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cStateDependencyStateDependencyParserRuleCall_3_0_0 = (RuleCall)cStateDependencyAssignment_3_0.eContents().get(0);
		private final Assignment cFeatureDependencyAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cFeatureDependencyFeatureDependencyParserRuleCall_3_1_0 = (RuleCall)cFeatureDependencyAssignment_3_1.eContents().get(0);
		private final Assignment cTransitionDependencyAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cTransitionDependencyTransitionDependencyParserRuleCall_3_2_0 = (RuleCall)cTransitionDependencyAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentState:
		//	'State' state=[coom::State|FQN]
		//	'{' (stateDependency=StateDependency? & featureDependency=FeatureDependency? &
		//	transitionDependency=TransitionDependency?)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'State' state=[coom::State|FQN] '{' (stateDependency=StateDependency? & featureDependency=FeatureDependency? &
		//transitionDependency=TransitionDependency?) '}'
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//state=[coom::State|FQN]
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//[coom::State|FQN]
		public CrossReference getStateStateCrossReference_1_0() { return cStateStateCrossReference_1_0; }
		
		//FQN
		public RuleCall getStateStateFQNParserRuleCall_1_0_1() { return cStateStateFQNParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//stateDependency=StateDependency? & featureDependency=FeatureDependency? & transitionDependency=TransitionDependency?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//stateDependency=StateDependency?
		public Assignment getStateDependencyAssignment_3_0() { return cStateDependencyAssignment_3_0; }
		
		//StateDependency
		public RuleCall getStateDependencyStateDependencyParserRuleCall_3_0_0() { return cStateDependencyStateDependencyParserRuleCall_3_0_0; }
		
		//featureDependency=FeatureDependency?
		public Assignment getFeatureDependencyAssignment_3_1() { return cFeatureDependencyAssignment_3_1; }
		
		//FeatureDependency
		public RuleCall getFeatureDependencyFeatureDependencyParserRuleCall_3_1_0() { return cFeatureDependencyFeatureDependencyParserRuleCall_3_1_0; }
		
		//transitionDependency=TransitionDependency?
		public Assignment getTransitionDependencyAssignment_3_2() { return cTransitionDependencyAssignment_3_2; }
		
		//TransitionDependency
		public RuleCall getTransitionDependencyTransitionDependencyParserRuleCall_3_2_0() { return cTransitionDependencyTransitionDependencyParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StateDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.StateDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatesComponentStateCrossReference_1_0 = (CrossReference)cStatesAssignment_1.eContents().get(0);
		private final RuleCall cStatesComponentStateFQNParserRuleCall_1_0_1 = (RuleCall)cStatesComponentStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStatesComponentStateCrossReference_2_1_0 = (CrossReference)cStatesAssignment_2_1.eContents().get(0);
		private final RuleCall cStatesComponentStateFQNParserRuleCall_2_1_0_1 = (RuleCall)cStatesComponentStateCrossReference_2_1_0.eContents().get(1);
		
		//StateDependency:
		//	'depends on states' states+=[ComponentState|FQN] (',' states+=[ComponentState|FQN])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'depends on states' states+=[ComponentState|FQN] (',' states+=[ComponentState|FQN])*
		public Group getGroup() { return cGroup; }
		
		//'depends on states'
		public Keyword getDependsOnStatesKeyword_0() { return cDependsOnStatesKeyword_0; }
		
		//states+=[ComponentState|FQN]
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//[ComponentState|FQN]
		public CrossReference getStatesComponentStateCrossReference_1_0() { return cStatesComponentStateCrossReference_1_0; }
		
		//FQN
		public RuleCall getStatesComponentStateFQNParserRuleCall_1_0_1() { return cStatesComponentStateFQNParserRuleCall_1_0_1; }
		
		//(',' states+=[ComponentState|FQN])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//states+=[ComponentState|FQN]
		public Assignment getStatesAssignment_2_1() { return cStatesAssignment_2_1; }
		
		//[ComponentState|FQN]
		public CrossReference getStatesComponentStateCrossReference_2_1_0() { return cStatesComponentStateCrossReference_2_1_0; }
		
		//FQN
		public RuleCall getStatesComponentStateFQNParserRuleCall_2_1_0_1() { return cStatesComponentStateFQNParserRuleCall_2_1_0_1; }
	}
	public class TransitionDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.TransitionDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnTransitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransistionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTransistionsComponentTransitionCrossReference_1_0 = (CrossReference)cTransistionsAssignment_1.eContents().get(0);
		private final RuleCall cTransistionsComponentTransitionFQNParserRuleCall_1_0_1 = (RuleCall)cTransistionsComponentTransitionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTransistionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTransistionsComponentTransitionCrossReference_2_1_0 = (CrossReference)cTransistionsAssignment_2_1.eContents().get(0);
		private final RuleCall cTransistionsComponentTransitionFQNParserRuleCall_2_1_0_1 = (RuleCall)cTransistionsComponentTransitionCrossReference_2_1_0.eContents().get(1);
		
		//TransitionDependency:
		//	'depends on transitions' transistions+=[ComponentTransition|FQN] (',' transistions+=[ComponentTransition|FQN])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'depends on transitions' transistions+=[ComponentTransition|FQN] (',' transistions+=[ComponentTransition|FQN])*
		public Group getGroup() { return cGroup; }
		
		//'depends on transitions'
		public Keyword getDependsOnTransitionsKeyword_0() { return cDependsOnTransitionsKeyword_0; }
		
		//transistions+=[ComponentTransition|FQN]
		public Assignment getTransistionsAssignment_1() { return cTransistionsAssignment_1; }
		
		//[ComponentTransition|FQN]
		public CrossReference getTransistionsComponentTransitionCrossReference_1_0() { return cTransistionsComponentTransitionCrossReference_1_0; }
		
		//FQN
		public RuleCall getTransistionsComponentTransitionFQNParserRuleCall_1_0_1() { return cTransistionsComponentTransitionFQNParserRuleCall_1_0_1; }
		
		//(',' transistions+=[ComponentTransition|FQN])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//transistions+=[ComponentTransition|FQN]
		public Assignment getTransistionsAssignment_2_1() { return cTransistionsAssignment_2_1; }
		
		//[ComponentTransition|FQN]
		public CrossReference getTransistionsComponentTransitionCrossReference_2_1_0() { return cTransistionsComponentTransitionCrossReference_2_1_0; }
		
		//FQN
		public RuleCall getTransistionsComponentTransitionFQNParserRuleCall_2_1_0_1() { return cTransistionsComponentTransitionFQNParserRuleCall_2_1_0_1; }
	}
	public class FeatureDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.FeatureDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnFeaturesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeaturesComponentFeatureCrossReference_1_0 = (CrossReference)cFeaturesAssignment_1.eContents().get(0);
		private final RuleCall cFeaturesComponentFeatureFQNParserRuleCall_1_0_1 = (RuleCall)cFeaturesComponentFeatureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cFeaturesComponentFeatureCrossReference_2_1_0 = (CrossReference)cFeaturesAssignment_2_1.eContents().get(0);
		private final RuleCall cFeaturesComponentFeatureFQNParserRuleCall_2_1_0_1 = (RuleCall)cFeaturesComponentFeatureCrossReference_2_1_0.eContents().get(1);
		
		//FeatureDependency:
		//	'depends on features' features+=[ComponentFeature|FQN] (',' features+=[ComponentFeature|FQN])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'depends on features' features+=[ComponentFeature|FQN] (',' features+=[ComponentFeature|FQN])*
		public Group getGroup() { return cGroup; }
		
		//'depends on features'
		public Keyword getDependsOnFeaturesKeyword_0() { return cDependsOnFeaturesKeyword_0; }
		
		//features+=[ComponentFeature|FQN]
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }
		
		//[ComponentFeature|FQN]
		public CrossReference getFeaturesComponentFeatureCrossReference_1_0() { return cFeaturesComponentFeatureCrossReference_1_0; }
		
		//FQN
		public RuleCall getFeaturesComponentFeatureFQNParserRuleCall_1_0_1() { return cFeaturesComponentFeatureFQNParserRuleCall_1_0_1; }
		
		//(',' features+=[ComponentFeature|FQN])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//features+=[ComponentFeature|FQN]
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }
		
		//[ComponentFeature|FQN]
		public CrossReference getFeaturesComponentFeatureCrossReference_2_1_0() { return cFeaturesComponentFeatureCrossReference_2_1_0; }
		
		//FQN
		public RuleCall getFeaturesComponentFeatureFQNParserRuleCall_2_1_0_1() { return cFeaturesComponentFeatureFQNParserRuleCall_2_1_0_1; }
	}
	public class NodeStateAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.NodeStateAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClientStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClientStateStateCrossReference_1_0 = (CrossReference)cClientStateAssignment_1.eContents().get(0);
		private final RuleCall cClientStateStateFQNParserRuleCall_1_0_1 = (RuleCall)cClientStateStateCrossReference_1_0.eContents().get(1);
		private final Keyword cSetSystemStatesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStatesNodeStateCrossReference_3_0 = (CrossReference)cStatesAssignment_3.eContents().get(0);
		private final RuleCall cStatesNodeStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStatesNodeStateCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStatesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cStatesNodeStateCrossReference_4_1_0 = (CrossReference)cStatesAssignment_4_1.eContents().get(0);
		private final RuleCall cStatesNodeStateIDTerminalRuleCall_4_1_0_1 = (RuleCall)cStatesNodeStateCrossReference_4_1_0.eContents().get(1);
		
		//NodeStateAssociation:
		//	'for' clientState=[coom::State|FQN] 'set system-states' states+=[NodeState] (',' states+=[NodeState])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' clientState=[coom::State|FQN] 'set system-states' states+=[NodeState] (',' states+=[NodeState])*
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//clientState=[coom::State|FQN]
		public Assignment getClientStateAssignment_1() { return cClientStateAssignment_1; }
		
		//[coom::State|FQN]
		public CrossReference getClientStateStateCrossReference_1_0() { return cClientStateStateCrossReference_1_0; }
		
		//FQN
		public RuleCall getClientStateStateFQNParserRuleCall_1_0_1() { return cClientStateStateFQNParserRuleCall_1_0_1; }
		
		//'set system-states'
		public Keyword getSetSystemStatesKeyword_2() { return cSetSystemStatesKeyword_2; }
		
		//states+=[NodeState]
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }
		
		//[NodeState]
		public CrossReference getStatesNodeStateCrossReference_3_0() { return cStatesNodeStateCrossReference_3_0; }
		
		//ID
		public RuleCall getStatesNodeStateIDTerminalRuleCall_3_0_1() { return cStatesNodeStateIDTerminalRuleCall_3_0_1; }
		
		//(',' states+=[NodeState])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//states+=[NodeState]
		public Assignment getStatesAssignment_4_1() { return cStatesAssignment_4_1; }
		
		//[NodeState]
		public CrossReference getStatesNodeStateCrossReference_4_1_0() { return cStatesNodeStateCrossReference_4_1_0; }
		
		//ID
		public RuleCall getStatesNodeStateIDTerminalRuleCall_4_1_0_1() { return cStatesNodeStateIDTerminalRuleCall_4_1_0_1; }
	}
	public class ComponentFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.ComponentFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStatesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cStatesStateCrossReference_4_0 = (CrossReference)cStatesAssignment_4.eContents().get(0);
		private final RuleCall cStatesStateFQNParserRuleCall_4_0_1 = (RuleCall)cStatesStateCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStatesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_5_1_0 = (CrossReference)cStatesAssignment_5_1.eContents().get(0);
		private final RuleCall cStatesStateFQNParserRuleCall_5_1_0_1 = (RuleCall)cStatesStateCrossReference_5_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComponentFeature:
		//	'Feature' name=ID
		//	'{'
		//	'states' states+=[coom::State|FQN] (',' states+=[coom::State|FQN])*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Feature' name=ID '{' 'states' states+=[coom::State|FQN] (',' states+=[coom::State|FQN])* '}'
		public Group getGroup() { return cGroup; }
		
		//'Feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'states'
		public Keyword getStatesKeyword_3() { return cStatesKeyword_3; }
		
		//states+=[coom::State|FQN]
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//[coom::State|FQN]
		public CrossReference getStatesStateCrossReference_4_0() { return cStatesStateCrossReference_4_0; }
		
		//FQN
		public RuleCall getStatesStateFQNParserRuleCall_4_0_1() { return cStatesStateFQNParserRuleCall_4_0_1; }
		
		//(',' states+=[coom::State|FQN])*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//states+=[coom::State|FQN]
		public Assignment getStatesAssignment_5_1() { return cStatesAssignment_5_1; }
		
		//[coom::State|FQN]
		public CrossReference getStatesStateCrossReference_5_1_0() { return cStatesStateCrossReference_5_1_0; }
		
		//FQN
		public RuleCall getStatesStateFQNParserRuleCall_5_1_0_1() { return cStatesStateFQNParserRuleCall_5_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.visteon.onoff.States.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final NodeStateConfigurationElements pNodeStateConfiguration;
	private final NodeStateDiagramElements pNodeStateDiagram;
	private final NodeStateElements pNodeState;
	private final NodeTransitionElements pNodeTransition;
	private final ClientConfigurationElements pClientConfiguration;
	private final ComponentTransitionElements pComponentTransition;
	private final ComponentStateElements pComponentState;
	private final StateDependencyElements pStateDependency;
	private final TransitionDependencyElements pTransitionDependency;
	private final FeatureDependencyElements pFeatureDependency;
	private final NodeStateAssociationElements pNodeStateAssociation;
	private final ComponentFeatureElements pComponentFeature;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StatesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNodeStateConfiguration = new NodeStateConfigurationElements();
		this.pNodeStateDiagram = new NodeStateDiagramElements();
		this.pNodeState = new NodeStateElements();
		this.pNodeTransition = new NodeTransitionElements();
		this.pClientConfiguration = new ClientConfigurationElements();
		this.pComponentTransition = new ComponentTransitionElements();
		this.pComponentState = new ComponentStateElements();
		this.pStateDependency = new StateDependencyElements();
		this.pTransitionDependency = new TransitionDependencyElements();
		this.pFeatureDependency = new FeatureDependencyElements();
		this.pNodeStateAssociation = new NodeStateAssociationElements();
		this.pComponentFeature = new ComponentFeatureElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.visteon.onoff.States".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//NodeStateConfiguration:
	//	nsd=NodeStateDiagram
	//	clientConfigs+=ClientConfiguration*;
	public NodeStateConfigurationElements getNodeStateConfigurationAccess() {
		return pNodeStateConfiguration;
	}
	
	public ParserRule getNodeStateConfigurationRule() {
		return getNodeStateConfigurationAccess().getRule();
	}
	
	//NodeStateDiagram:
	//	{NodeStateDiagram}
	//	'NodeStateDiagram' '{' ('globalEdgeweight' gEdgeWeight=INT)? ('globalTransitionTimeout'
	//	gTransitionTimeoutInMilliseconds=INT)? (states+=NodeState | transitions+=NodeTransition)*
	//	'}';
	public NodeStateDiagramElements getNodeStateDiagramAccess() {
		return pNodeStateDiagram;
	}
	
	public ParserRule getNodeStateDiagramRule() {
		return getNodeStateDiagramAccess().getRule();
	}
	
	//NodeState:
	//	initial?='initial'? 'State' name=ID;
	public NodeStateElements getNodeStateAccess() {
		return pNodeState;
	}
	
	public ParserRule getNodeStateRule() {
		return getNodeStateAccess().getRule();
	}
	
	//NodeTransition:
	//	essential?='essential'? 'Transition' name=ID ':' fromState=[NodeState] '->' toState=[NodeState] ('{' ('edgeweight'
	//	edgeweight=INT)? ('timeout' timeoutInMilliseconds=INT)?
	//	'}')?;
	public NodeTransitionElements getNodeTransitionAccess() {
		return pNodeTransition;
	}
	
	public ParserRule getNodeTransitionRule() {
		return getNodeTransitionAccess().getRule();
	}
	
	//ClientConfiguration:
	//	'Client' name=ID // instance name - scope coming from COOM
	//	'{'
	//	'coom' coomRef=[coom::ComponentOnOffManifest] ('clientTransitionTimeout' transTimeoutInMilliseconds=INT)?
	//	(transitions+=ComponentTransition | states+=ComponentState | features+=ComponentFeature |
	//	nodeStateAssociations+=NodeStateAssociation)*
	//	'}';
	public ClientConfigurationElements getClientConfigurationAccess() {
		return pClientConfiguration;
	}
	
	public ParserRule getClientConfigurationRule() {
		return getClientConfigurationAccess().getRule();
	}
	
	//ComponentTransition:
	//	essential?='essential'? 'Transition' transition=[coom::Transition|FQN]
	//	'{' ('timeout' timeoutInMilliseconds=INT)? ('max-retries' maxretries=INT)? (stateDependency=StateDependency? &
	//	featureDependency=FeatureDependency?)
	//	'}';
	public ComponentTransitionElements getComponentTransitionAccess() {
		return pComponentTransition;
	}
	
	public ParserRule getComponentTransitionRule() {
		return getComponentTransitionAccess().getRule();
	}
	
	//ComponentState:
	//	'State' state=[coom::State|FQN]
	//	'{' (stateDependency=StateDependency? & featureDependency=FeatureDependency? &
	//	transitionDependency=TransitionDependency?)
	//	'}';
	public ComponentStateElements getComponentStateAccess() {
		return pComponentState;
	}
	
	public ParserRule getComponentStateRule() {
		return getComponentStateAccess().getRule();
	}
	
	//StateDependency:
	//	'depends on states' states+=[ComponentState|FQN] (',' states+=[ComponentState|FQN])*;
	public StateDependencyElements getStateDependencyAccess() {
		return pStateDependency;
	}
	
	public ParserRule getStateDependencyRule() {
		return getStateDependencyAccess().getRule();
	}
	
	//TransitionDependency:
	//	'depends on transitions' transistions+=[ComponentTransition|FQN] (',' transistions+=[ComponentTransition|FQN])*;
	public TransitionDependencyElements getTransitionDependencyAccess() {
		return pTransitionDependency;
	}
	
	public ParserRule getTransitionDependencyRule() {
		return getTransitionDependencyAccess().getRule();
	}
	
	//FeatureDependency:
	//	'depends on features' features+=[ComponentFeature|FQN] (',' features+=[ComponentFeature|FQN])*;
	public FeatureDependencyElements getFeatureDependencyAccess() {
		return pFeatureDependency;
	}
	
	public ParserRule getFeatureDependencyRule() {
		return getFeatureDependencyAccess().getRule();
	}
	
	//NodeStateAssociation:
	//	'for' clientState=[coom::State|FQN] 'set system-states' states+=[NodeState] (',' states+=[NodeState])*;
	public NodeStateAssociationElements getNodeStateAssociationAccess() {
		return pNodeStateAssociation;
	}
	
	public ParserRule getNodeStateAssociationRule() {
		return getNodeStateAssociationAccess().getRule();
	}
	
	//ComponentFeature:
	//	'Feature' name=ID
	//	'{'
	//	'states' states+=[coom::State|FQN] (',' states+=[coom::State|FQN])*
	//	'}';
	public ComponentFeatureElements getComponentFeatureAccess() {
		return pComponentFeature;
	}
	
	public ParserRule getComponentFeatureRule() {
		return getComponentFeatureAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
