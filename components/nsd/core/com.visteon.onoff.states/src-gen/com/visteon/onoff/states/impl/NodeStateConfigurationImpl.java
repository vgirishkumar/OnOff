/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.states.impl;

import com.visteon.onoff.states.ClientConfiguration;
import com.visteon.onoff.states.Import;
import com.visteon.onoff.states.NodeStateConfiguration;
import com.visteon.onoff.states.NodeStateDiagram;
import com.visteon.onoff.states.StatesPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node State Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateConfigurationImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateConfigurationImpl#getNsd <em>Nsd</em>}</li>
 *   <li>{@link com.visteon.onoff.states.impl.NodeStateConfigurationImpl#getClientConfig <em>Client Config</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeStateConfigurationImpl extends MinimalEObjectImpl.Container implements NodeStateConfiguration
{
  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getNsd() <em>Nsd</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNsd()
   * @generated
   * @ordered
   */
  protected NodeStateDiagram nsd;

  /**
   * The cached value of the '{@link #getClientConfig() <em>Client Config</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClientConfig()
   * @generated
   * @ordered
   */
  protected EList<ClientConfiguration> clientConfig;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeStateConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StatesPackage.Literals.NODE_STATE_CONFIGURATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, StatesPackage.NODE_STATE_CONFIGURATION__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NodeStateDiagram getNsd()
  {
    return nsd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNsd(NodeStateDiagram newNsd, NotificationChain msgs)
  {
    NodeStateDiagram oldNsd = nsd;
    nsd = newNsd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_STATE_CONFIGURATION__NSD, oldNsd, newNsd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNsd(NodeStateDiagram newNsd)
  {
    if (newNsd != nsd)
    {
      NotificationChain msgs = null;
      if (nsd != null)
        msgs = ((InternalEObject)nsd).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StatesPackage.NODE_STATE_CONFIGURATION__NSD, null, msgs);
      if (newNsd != null)
        msgs = ((InternalEObject)newNsd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StatesPackage.NODE_STATE_CONFIGURATION__NSD, null, msgs);
      msgs = basicSetNsd(newNsd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StatesPackage.NODE_STATE_CONFIGURATION__NSD, newNsd, newNsd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ClientConfiguration> getClientConfig()
  {
    if (clientConfig == null)
    {
      clientConfig = new EObjectContainmentEList<ClientConfiguration>(ClientConfiguration.class, this, StatesPackage.NODE_STATE_CONFIGURATION__CLIENT_CONFIG);
    }
    return clientConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_CONFIGURATION__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case StatesPackage.NODE_STATE_CONFIGURATION__NSD:
        return basicSetNsd(null, msgs);
      case StatesPackage.NODE_STATE_CONFIGURATION__CLIENT_CONFIG:
        return ((InternalEList<?>)getClientConfig()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_CONFIGURATION__IMPORTS:
        return getImports();
      case StatesPackage.NODE_STATE_CONFIGURATION__NSD:
        return getNsd();
      case StatesPackage.NODE_STATE_CONFIGURATION__CLIENT_CONFIG:
        return getClientConfig();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_CONFIGURATION__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case StatesPackage.NODE_STATE_CONFIGURATION__NSD:
        setNsd((NodeStateDiagram)newValue);
        return;
      case StatesPackage.NODE_STATE_CONFIGURATION__CLIENT_CONFIG:
        getClientConfig().clear();
        getClientConfig().addAll((Collection<? extends ClientConfiguration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_CONFIGURATION__IMPORTS:
        getImports().clear();
        return;
      case StatesPackage.NODE_STATE_CONFIGURATION__NSD:
        setNsd((NodeStateDiagram)null);
        return;
      case StatesPackage.NODE_STATE_CONFIGURATION__CLIENT_CONFIG:
        getClientConfig().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StatesPackage.NODE_STATE_CONFIGURATION__IMPORTS:
        return imports != null && !imports.isEmpty();
      case StatesPackage.NODE_STATE_CONFIGURATION__NSD:
        return nsd != null;
      case StatesPackage.NODE_STATE_CONFIGURATION__CLIENT_CONFIG:
        return clientConfig != null && !clientConfig.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //NodeStateConfigurationImpl
