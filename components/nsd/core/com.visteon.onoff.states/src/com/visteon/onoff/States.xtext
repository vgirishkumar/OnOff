grammar com.visteon.onoff.States with org.eclipse.xtext.common.Terminals

generate states "http://www.visteon.com/onoff/States"
import "http://www.visteon.com/onoff/Coom" as coom

NodeStateConfiguration:
	imports+=Import*
	(nsd=NodeStateDiagram)
	(clientConfig+=ClientConfiguration)*;

Import:
	'import' importURI=STRING;

NodeStateDiagram:
	{NodeStateDiagram}
	'NodeStateDiagram' '{'
	('globalEdgeweight' gEdgeWeight=INT)?
	('globalTransitionTimeout' gTransitionTimeoutInMilliseconds=INT)?
	(nodeStates+=NodeState |
	nodeTransitions+=NodeTransition)*
	'}';

NodeState:
	(initial?='initial')? 'State' name=ID;

NodeTransition:
	(essential?='essential')? 'Transition' name=ID ':' fromState=[NodeState] '->' toState=[NodeState]
	('{'
	('edgeweight' edgeweight=INT)?
	('timeout' timeoutInMilliseconds=INT)?
	'}')?;

ClientConfiguration:
	'Client' name=ID // instance name - scope coming from COOM
	'{'
	('coom' coomRef=[coom::ComponentOnOffManifest])
	('clientTransitionTimeout' transTimeoutInMilliseconds=INT)?
	(nodeStateAssociations=NodeStateAssociation)?
	(componentTransitions+=ComponentTransition |
	componentStates+=ComponentState |
	features+=Feature)*
	'}';

ComponentTransition:
	(essential?='essential')? 'Transition' transition=[coom::Transition|FQN]
	'{'
	('timeout' timeoutInMilliseconds=INT)?
	('max-retries' maxretries=INT)?
	'}';

ComponentState:
	'State' state=[coom::State|FQN]
	'{'
	((stateDependencies=StateDependency)? &
	(featureDependencies=FeatureDependency)? &
	(transitionDependencies=TransitionDependency)?)
	'}';

StateDependency:
	'depends on states' states+=[coom::State|FQN] (',' states+=[coom::State|FQN])*;

TransitionDependency:
	'depends on transitions' transistions+=[coom::Transition|FQN] (',' transistions+=[coom::Transition|FQN])*;

FeatureDependency:
	'depends on features' features+=[Feature] (',' features+=[Feature])*;

NodeStateAssociation:
	'For' clientState=[coom::State|FQN] 'set system states' systemStates+=[NodeState] (',' systemStates+=[NodeState])*;

Feature:
	'Feature' name=ID
	'{'
	'states' featureStates+=[coom::State|FQN] (',' featureStates+=[coom::State|FQN])*
	'}';

FQN:
	ID ('.' ID)*; 