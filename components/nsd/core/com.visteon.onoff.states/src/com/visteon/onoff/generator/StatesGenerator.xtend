/*
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.generator

import com.visteon.onoff.states.ClientConfiguration
import com.visteon.onoff.states.NodeStateConfiguration
import com.visteon.onoff.states.NodeStateDiagram
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StatesGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		println("Code generation for " + resource.URI.toString)
		resource.allContents.filter(ClientConfiguration).forEach [
			states.forEach [
				println(state.name + " is from " + state.eResource.URI.toString + " and start state =" +
					state.isInitial)
			]
		]
		val nsd = (resource.contents.get(0) as NodeStateConfiguration).nsd
		fsa.generateFile("NodeStateConfigTypes.hpp", nsd.generateNodeStateConfigTypes_HPP)
		fsa.generateFile("NodeStateConfigTypes.cpp", nsd.generateNodeStateConfigTypes_CPP)
	}

	def CharSequence generateNodeStateConfigTypes_CPP(NodeStateDiagram nsd) {
		val states = nsd.states
		'''	
			//=============================================================================
			// Project       Project COMA Framework
			// (c) copyright 2016
			// Company       Visteon Electronics Germany GmbH
			//               All rights reserved
			// Secrecy Level STRICTLY CONFIDENTAL
			//=============================================================================
			/// @file        PlatformOnOff/NscTestProject/private/src/Config/NodeStateConfigTypes.cpp
			/// @ingroup     jci_ihu
			/// @brief       Node state config types (implementation)
			///
			///              This file has been generated by NSDGenerator 2.0.0_master
			///              DO NOT EDIT!!!!
			
			#include <cstring>
			#include "PlatformOnOff/NscTestProject/inc/Config/NodeStateConfigTypes.hpp"
			
			namespace JCI
			{
				namespace TestProject
				{
					const char* nodeStateStrings[NodeState_Last] = {
						"Invalid",
						"Init",
						«FOR state : states SEPARATOR ','»
							"«state.name»"
						«ENDFOR»
					};
					
				} // namespace TestProject
				
				const char* getString(const TestProject::NodeState nodeState)
				{
					switch (nodeState)
					{
						case TestProject::NodeState_Invalid : return TestProject::nodeStateStrings[0];
						case TestProject::NodeState_Init : return TestProject::nodeStateStrings[1];
						«FOR state : nsd.states»
							case TestProject:: NodeState_«state.name» : return TestProject::nodeStateStrings[«nsd.states.indexOf(state) + 2»];
						«ENDFOR»
						default: return TestProject::nodeStateStrings[0];
					}
				}
				
			} // namespace JCI
			
		'''
	}

	def generateNodeStateConfigTypes_HPP(NodeStateDiagram nsd) '''
		//=============================================================================
		// Project       Project COMA Framework
		// (c) copyright 2016
		// Company       Visteon Electronics Germany GmbH
		//               All rights reserved
		// Secrecy Level STRICTLY CONFIDENTAL
		//=============================================================================
		/// @file        PlatformOnOff/NscTestProject/inc/Config/NodeStateConfigTypes.hpp
		/// @ingroup     jci_ihu
		/// @brief       Node state config types (header)
		///
		///              This file has been generated by NSDGenerator 2.0.0_master
		///              DO NOT EDIT!!!!
		
		#ifndef ONOFF_PROJECT_GEN_NODESTATECONFIGTYPES_HPP_
		#define ONOFF_PROJECT_GEN_NODESTATECONFIGTYPES_HPP_
		
		// includes
		#include <stdint.h>
		
		namespace JCI
		{
			namespace TestProject
			{
				enum NodeState
				{
				    NodeState_Invalid = 0,
				    «FOR state : nsd.states»
				    	NodeState_«state.name»,
				    «ENDFOR»
				    NodeState_Last	//Guard element
				};
			} // namespace TestProject
			
			const char* getString(const TestProject::NodeState nodeState);
			
		} // namespace JCI
		
		#endif // ONOFF_PROJECT_GEN_NODESTATECONFIGTYPES_HPP_
	'''
}
