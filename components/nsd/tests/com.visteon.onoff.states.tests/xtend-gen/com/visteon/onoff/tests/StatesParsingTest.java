/**
 * generated by Xtext 2.13.0
 */
package com.visteon.onoff.tests;

import com.google.inject.Inject;
import com.visteon.onoff.states.NodeStateConfiguration;
import com.visteon.onoff.tests.StatesInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(StatesInjectorProvider.class)
@SuppressWarnings("all")
public class StatesParsingTest {
  @Inject
  private ParseHelper<NodeStateConfiguration> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("NodeStateDiagram {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("State State1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("State State2");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Transition S1toS2 : State1 -> State2");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Client Test {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("COOM test.CompA");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("State test.CompA.S1 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("depends on Transition test.CompA.S1toS2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("State test.CompA.S2 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("depends on Transition test.CompA.S1toS2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("For State1 set test.CompA.S1 ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Feature Name {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("States test.CompA.S1 , test.CompA.S2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Transition test.CompA.S1toS2 {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("timeout 1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final NodeStateConfiguration result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
